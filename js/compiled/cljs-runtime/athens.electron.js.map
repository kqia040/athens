{"version":3,"sources":["athens/electron.cljs"],"mappings":"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","names":["athens.electron/electron","js/require","athens.electron/remote","athens.electron/dialog","athens.electron/app","athens.electron/fs","athens.electron/path","athens.electron/stream","athens.electron/DB-INDEX","athens.electron/IMAGES-DIR-NAME","athens.electron/move-dialog!","res","cljs.core/clj->js","new-dir","cljs.core/first","cljs.core/deref","curr-db-filepath","re_frame.core.subscribe","base-dir","base-dir-name","curr-dir-images","new-dir-images","new-db-filepath","js/alert","re-frame.core/dispatch","imgs","cljs.core.array_seq","cljs.core.map","x","seq__54839","cljs.core/seq","chunk__54840","count__54841","i__54842","vec__54857","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__54864","cljs.core/next","curr","new","athens.electron/open-dialog!","open-file","and__4115__auto__","read-db","db","datascript.transit/read-transit-str","re-frame.core/dispatch-sync","athens.electron/create-dialog!","db-name","db-location","cljs.core/not-empty","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","athens.athens-datoms/datoms","dir","dir-images","db-filepath","datascript.transit/write-transit-str","var_args","G__54874","athens.electron/save-image","js/Error","item","extension","athens.electron.save_image","head","tail","curr-db-dir","img-dir","file","img-filename","athens.util/gen-block-uid","reader","js/FileReader","new-str","cb","e","img-data","clojure.string/replace-first","js/Buffer","athens.electron/dnd-image","target-uid","drag-target","map__54880","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","order","athens.db/get-block","parent","athens.db/get-parent","block","new-block","tx-data","cljs.core._EQ_","reindex","athens.db/inc-after","new-children","cljs.core.conj","new-target-block","index","G__54886","cljs.core/Keyword","new-parent","js/setTimeout","re_frame.core.reg_sub","_","re_frame.core.reg_event_fx","p__54895","map__54897","re_frame.core.inject_cofx","p__54908","map__54909","local-storage","p__54914","map__54916","DOC-PATH","athens-dir","db-images","cljs.core/not","cljs.core.concat","athens.db/retract-page-recursively","athens.electron/sync-db-from-fs","filepath","_filename","prev-mtime","curr-mtime","newer?","athens.electron/debounce-sync-db-from-fs","goog.functions/debounce","p__54935","vec__54939","dirpath","_event","filename","cljs.core/re-find","cljs.core/re-pattern","re_frame.core.reg_event_db","p__54948","vec__54950","mtime1","map__54954","mtime","or__4126__auto__","cljs.core.assoc","athens.db/rfdb","p__54966","vec__54967","athens.electron/write-file","data","r","w","error-cb","err","js/console.error","js/Date","athens.electron/debounce-write","re-frame.core/reg-fx","p__54991","vec__54992"],"sourcesContent":["(ns athens.electron\n  (:require\n    [athens.athens-datoms :as athens-datoms]\n    [athens.db :as db]\n    [athens.util :as util]\n    [datascript.core :as d]\n    [datascript.transit :as dt :refer [write-transit-str]]\n    [day8.re-frame.async-flow-fx]\n    [goog.functions :refer [debounce]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx reg-fx dispatch dispatch-sync subscribe reg-sub]]))\n\n\n;; XXX: most of these operations are effectful. They _should_ be re-written with effects, but feels like too much boilerplate.\n\n\n(def electron (js/require \"electron\"))\n(def remote (.. electron -remote))\n\n(def dialog (.. remote -dialog))\n(def app (.. remote -app))\n\n\n(def fs (js/require \"fs\"))\n(def path (js/require \"path\"))\n(def stream (js/require \"stream\"))\n\n\n(def DB-INDEX \"index.transit\")\n(def IMAGES-DIR-NAME \"images\")\n\n;;; Filesystem Dialogs\n\n\n(defn move-dialog!\n  \"If new-dir/athens already exists, no-op and alert user.\n  Else copy db to new db location. When there is an images folder, copy /images folder and all images.\n    file:// image urls in block/string don't get updated, so if original images are deleted, links will be broken.\"\n  []\n  (let [res     (.showOpenDialogSync dialog (clj->js {:properties [\"openDirectory\"]}))\n        new-dir (first res)]\n    (when new-dir\n      (let [curr-db-filepath @(subscribe [:db/filepath])\n            base-dir         (.dirname path curr-db-filepath)\n            base-dir-name    (.basename path base-dir)\n            curr-dir-images  (.resolve path base-dir IMAGES-DIR-NAME)\n            new-dir          (.resolve path new-dir base-dir-name)\n            new-dir-images   (.resolve path new-dir IMAGES-DIR-NAME)\n            new-db-filepath  (.resolve path new-dir DB-INDEX)]\n        (if (.existsSync fs new-dir)\n          (js/alert (str \"Directory \" new-dir \" already exists, sorry.\"))\n          (do (.mkdirSync fs new-dir)\n              (.copyFileSync fs curr-db-filepath new-db-filepath)\n              (dispatch [:db/update-filepath new-db-filepath])\n              (when (.existsSync fs curr-dir-images)\n                (.mkdirSync fs new-dir-images)\n                (let [imgs (->> (.readdirSync fs curr-dir-images)\n                                array-seq\n                                (map (fn [x]\n                                       [(.join path curr-dir-images x)\n                                        (.join path new-dir-images x)])))]\n                  (doseq [[curr new] imgs]\n                    (.copyFileSync fs curr new))))))))))\n\n\n(defn open-dialog!\n  \"Allow user to open db elsewhere from filesystem.\"\n  []\n  (let [res       (.showOpenDialogSync dialog (clj->js {:properties [\"openFile\"]\n                                                        :filters    [{:name \"Transit\" :extensions [\"transit\"]}]}))\n        open-file (first res)]\n    (when (and open-file (.existsSync fs open-file))\n      (let [read-db (.readFileSync fs open-file)\n            db      (dt/read-transit-str read-db)]\n        (dispatch-sync [:init-rfdb])\n        (dispatch [:fs/watch open-file])\n        (dispatch [:reset-conn db])\n        (dispatch [:db/update-filepath open-file])\n        (dispatch [:loading/unset])))))\n\n\n;; mkdir db-location/name/\n;; mkdir db-location/name/images\n;; write db-location/name/index.transit\n(defn create-dialog!\n  \"Create a new database.\"\n  [db-name]\n  (let [res         (.showOpenDialogSync dialog (clj->js {:properties [\"openDirectory\"]}))\n        db-location (first res)]\n    (when (and db-location (not-empty db-name))\n      (let [db          (d/db-with (d/empty-db db/schema) athens-datoms/datoms)\n            dir         (.resolve path db-location db-name)\n            dir-images  (.resolve path dir IMAGES-DIR-NAME)\n            db-filepath (.resolve path dir DB-INDEX)]\n        (if (.existsSync fs dir)\n          (js/alert (str \"Directory \" dir \" already exists, sorry.\"))\n          (do\n            (dispatch-sync [:init-rfdb])\n            (.mkdirSync fs dir)\n            (.mkdirSync fs dir-images)\n            (.writeFileSync fs db-filepath (dt/write-transit-str db))\n            (dispatch [:fs/watch db-filepath])\n            (dispatch [:db/update-filepath db-filepath])\n            (dispatch [:reset-conn db])\n            (dispatch [:loading/unset])))))))\n\n\n;; Image Paste\n(defn save-image\n  ([item extension]\n   (save-image \"\" \"\" item extension))\n  ([head tail item extension]\n   (let [curr-db-filepath @(subscribe [:db/filepath])\n         curr-db-dir      @(subscribe [:db/filepath-dir])\n         img-dir          (.resolve path curr-db-dir IMAGES-DIR-NAME)\n         base-dir         (.dirname path curr-db-filepath)\n         base-dir-name    (.basename path base-dir)\n         file             (.getAsFile item)\n         img-filename     (.resolve path img-dir (str \"img-\" base-dir-name \"-\" (util/gen-block-uid) \".\" extension))\n         reader           (js/FileReader.)\n         new-str          (str head \"![](\" \"file://\" img-filename \")\" tail)\n         cb               (fn [e]\n                            (let [img-data (as->\n                                             (.. e -target -result) x\n                                             (clojure.string/replace-first x #\"data:image/(jpeg|gif|png);base64,\" \"\")\n                                             (js/Buffer. x \"base64\"))]\n                              (when-not (.existsSync fs img-dir)\n                                (.mkdirSync fs img-dir))\n                              (.writeFileSync fs img-filename img-data)))]\n     (set! (.. reader -onload) cb)\n     (.readAsDataURL reader file)\n     new-str)))\n\n\n(defn dnd-image\n  [target-uid drag-target item extension]\n  (let [new-str   (save-image item extension)\n        {:block/keys [order]} (db/get-block [:block/uid target-uid])\n        parent    (db/get-parent [:block/uid target-uid])\n        block     (db/get-block [:block/uid target-uid])\n        new-block {:block/uid (util/gen-block-uid) :block/order 0 :block/string new-str :block/open true}\n        tx-data   (if (= drag-target :child)\n                    (let [reindex   (db/inc-after (:db/id block) -1)\n                          new-children (conj reindex new-block)\n                          new-target-block {:db/id [:block/uid target-uid] :block/children new-children}]\n                      new-target-block)\n                    (let [index        (case drag-target\n                                         :above (dec order)\n                                         :below order)\n                          reindex      (db/inc-after (:db/id parent) index)\n                          new-children (conj reindex new-block)\n                          new-parent   {:db/id (:db/id parent) :block/children new-children}]\n                      new-parent))]\n    ;; delay because you want to create block *after* the file has been saved to filesystem\n    ;; otherwise, <img> is created too fast, and no image is rendered\n    (js/setTimeout #(dispatch [:transact [tx-data]]) 50)))\n\n\n;;; Subs\n\n\n(reg-sub\n  :db/mtime\n  (fn [db _]\n    (:db/mtime db)))\n\n\n(reg-sub\n  :db/filepath\n  (fn [db _]\n    (:db/filepath db)))\n\n\n(reg-sub\n  :db/filepath-dir\n  (fn [db _]\n    (.dirname path (:db/filepath db))))\n\n\n;;; Events\n\n\n(reg-event-fx\n  :fs/open-dialog\n  (fn [{:keys [db]} _]\n    (js/alert (str \"No DB found at \" (:db/filepath db) \".\"\n                   \"\\nPlease open or create a new db.\"))\n    {:dispatch-n [[:modal/toggle]]}))\n\n\n(reg-event-fx\n  :local-storage/get-db-filepath\n  [(inject-cofx :local-storage \"db/filepath\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:db/update-filepath local-storage]}))\n\n\n(reg-event-fx\n  :local-storage/navigate\n  [(inject-cofx :local-storage \"current-route/uid\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:navigate {:page {:id local-storage}}]}))\n\n\n;; Documents/athens\n;; \u251c\u2500\u2500 images\n;; \u2514\u2500\u2500 index.transit\n(reg-event-fx\n  :fs/create-new-db\n  (fn []\n    (let [DOC-PATH    (.getPath app \"documents\")\n          athens-dir  (.resolve path DOC-PATH \"athens\")\n          db-filepath (.resolve path athens-dir DB-INDEX)\n          db-images   (.resolve path athens-dir IMAGES-DIR-NAME)]\n      (when (not (.existsSync fs athens-dir))\n        (.mkdirSync fs athens-dir))\n      (when (not (.existsSync fs db-images))\n        (.mkdirSync fs db-images))\n      {:fs/write!  [db-filepath (write-transit-str athens-datoms/datoms)]\n       :dispatch-n [[:db/update-filepath db-filepath]]})))\n\n\n(reg-event-fx\n  :db/retract-athens-pages\n  (fn []\n    {:dispatch [:transact (concat (db/retract-page-recursively \"Welcome\")\n                                  (db/retract-page-recursively \"Changelog\"))]}))\n\n\n(reg-event-fx\n  :db/transact-athens-pages\n  (fn []\n    {:dispatch [:transact athens-datoms/datoms]}))\n\n\n(defn sync-db-from-fs\n  \"If modified time is newer, update app-db with m-time. Prevents sync happening after db is written from the app.\"\n  [filepath _filename]\n  (let [prev-mtime @(subscribe [:db/mtime])\n        curr-mtime (.-mtime (.statSync fs filepath))\n        newer?     (< prev-mtime curr-mtime)]\n    (when newer?\n      (dispatch [:db/update-mtime curr-mtime])\n      (let [read-db (.readFileSync fs filepath)\n            db      (dt/read-transit-str read-db)]\n        (dispatch [:reset-conn db])))))\n\n\n(def debounce-sync-db-from-fs\n  (debounce sync-db-from-fs 1000))\n\n\n;; Watches directory that db is located in. If db file is updated, sync-db-from-fs.\n;; Watching db file directly doesn't always work, so watch directory and regex match.\n;; Debounce because files can be changed multiple times per save.\n(reg-event-fx\n  :fs/watch\n  (fn [_ [_ filepath]]\n    (let [dirpath (.dirname path filepath)]\n      (.. fs (watch dirpath (fn [_event filename]\n                              ;; when filename matches last part of filepath\n                              ;; e.g. \"first-db.transit\" matches \"home/u/Documents/athens/first-db.transit\"\n                              (when (re-find (re-pattern (str \"\\\\b\" filename \"$\")) filepath)\n                                (debounce-sync-db-from-fs filepath filename))))))\n    {}))\n\n\n(reg-event-db\n  :db/update-mtime\n  (fn [db [_ mtime1]]\n    (let [{:db/keys [filepath]} db\n          mtime (or mtime1 (.. fs (statSync filepath) -mtime))]\n      (assoc db :db/mtime mtime))))\n\n\n;; if localStorage is empty, assume first open\n;; create a Documents/athens directory and Documents/athens/db.transit file\n;; store path in localStorage and re-frame\n;; if localStorage has filepath, and there is a file\n;; Open and set db\n;; else - localStorage has filepath, but no file at filepath\n;; open or create a new starter db\n\n;; Watch filesystem, e.g. in case db is updated via Dropbox sync\n(reg-event-fx\n  :desktop/boot\n  (fn [_ _]\n    {:db         db/rfdb\n     :async-flow {:first-dispatch [:local-storage/get-db-filepath]\n                  :rules          [{:when        :seen?\n                                    :events      :db/update-filepath\n                                    :dispatch-fn (fn [[_ filepath]]\n                                                   (cond\n                                                     ;; No database path found in localStorage. Creating new one\n                                                     (nil? filepath) (dispatch [:fs/create-new-db])\n                                                     ;; Database found in local storage and filesystem:\n                                                     (.existsSync fs filepath) (let [read-db (.readFileSync fs filepath)\n                                                                                     db      (dt/read-transit-str read-db)]\n                                                                                 (dispatch [:fs/watch filepath])\n                                                                                 (dispatch [:reset-conn db]))\n                                                     ;; Database found in localStorage but not on filesystem\n                                                     :else (dispatch [:fs/open-dialog])))}\n\n                                   ;; if first time, go to Daily Pages and open left-sidebar\n                                   {:when       :seen?\n                                    :events     :fs/create-new-db\n                                    :dispatch-n [[:navigate :home]\n                                                 [:left-sidebar/toggle]]}\n\n                                   ;; if nth time, remember dark/light theme and last page\n                                   {:when       :seen?\n                                    :events     :reset-conn\n                                    :dispatch-n [[:local-storage/set-theme]\n                                                 [:local-storage/navigate]]}\n\n                                   ;; whether first or nth time, update athens pages\n                                   {:when       :seen-any-of?\n                                    :events     [:fs/create-new-db :reset-conn]\n                                    :dispatch-n [[:db/retract-athens-pages]\n                                                 [:db/transact-athens-pages]\n                                                 [:loading/unset]]\n                                    :halt?      true}]}}))\n\n\n;;; Effects\n\n\n(defn write-file\n  [filepath data]\n  (let [r (.. stream -Readable (from data))\n        w (.createWriteStream fs filepath)\n        error-cb (fn [err]\n                   (when err\n                     (js/alert (js/Error. err))\n                     (js/console.error (js/Error. err))))]\n    (.setEncoding r \"utf8\")\n    (.on r \"error\" error-cb)\n    (.on w \"error\" error-cb)\n    (.on w \"finish\" (fn []\n                      (dispatch [:db/sync])\n                      (dispatch [:db/update-mtime (js/Date.)])))\n    (.pipe r w)))\n\n\n(def debounce-write (debounce write-file 15000))\n\n\n(reg-fx\n  :fs/write!\n  (fn [[filepath data]]\n    (debounce-write filepath data)))\n"]}