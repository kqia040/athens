{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__51722__auto__","result__51723__auto__","debux.common.util/send-trace!","e","e56855","_","athens.db/rfdb","re_frame.core.reg_event_fx","p__56859","p__56861","map__56862","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__56863","cljs.core.nth","db","filepath","cljs.core.assoc","p__56872","vec__56873","p__56877","vec__56879","cljs.core.update","cljs.core/not","p__56885","vec__56887","G__56899","fexpr__56898","e56894","p__56906","vec__56907","selected-page","fexpr__56910","cljs.core/set","cljs.core/conj","p__56919","vec__56920","item","cljs.core.update_in","p__56923","vec__56924","width","p__56927","vec__56928","uid","map__56931","items","G__56933","cljs.core/dissoc","cljs.core._EQ_","cljs.core/count","p__56935","p__56936","map__56937","vec__56938","G__56957","cljs.core/deref","G__56958","G__56959","e56956","p__56960","p__56961","map__56962","vec__56963","block","G__56967","G__56968","G__56969","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge","new-items","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in","p__56970","p__56971","map__56972","vec__56973","index","p__56977","p__56978","map__56979","vec__56980","target","clojure.string.split","cljs.core/second","p__56984","vec__56985","p__56989","vec__56990","p1__56988#","cljs.core/filterv","cljs.core.not_EQ_","p__56993","vec__56994","uids","cljs.core/concat","athens.events/select-up","selected-items","first-item","cljs.core/first","prev-block-uid-","athens.db/prev-block-uid","prev-block","athens.db/get-block","parent","athens.db/get-parent","editing-uid","re_frame.core.subscribe","editing-idx","cljs.core.keep_indexed","idx","x","n","cljs.core/pop","parent-children","p1__56997#","cljs.core.map","to-keep","cljs.core.filter","cljs.core/contains?","new-vec","p__56998","vec__56999","athens.events/select-down","last-item","cljs.core/last","next-block-uid-","athens.db.next_block_uid","cljs.core.subvec","cljs.core.conj","p__57002","vec__57003","athens.events/delete-selected","vec__57006","selected-sibs-of-last","G__57009","G__57010","G__57011","G__57012","datascript.core/q","cljs.core.sort_by","order","athens.db/minus-after","p__57014","p__57015","map__57016","vec__57017","retract-vecs","p1__57013#","cljs.core.mapcat","athens.db/retract-uid-recursively","reindex-last-selected-parent","tx-data","cljs.core.concat","e57021","alert","e57022","e57023","cljs.core/assoc-in","e57024","p__57025","vec__57026","p__57029","vec__57030","p__57033","p__57034","map__57035","vec__57036","map__57039","title","new-db","athens.db/e-by-av","p__57042","p__57043","map__57044","vec__57045","map__57048","p__57051","map__57052","rfdb","athens.db/athens-url","p__57054","vec__57055","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.inject_cofx","p__57058","map__57059","local-storage","datascript.transit/read-transit-str","p__57061","vec__57062","p__57065","map__57066","is-dark","theme","athens.style/THEME-DARK","athens.style/THEME-LIGHT","athens.style/permute-color-opacities","p__57068","map__57069","dark?","new-dark","p__57071","vec__57072","synced?","p__57075","vec__57076","p__57079","vec__57080","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","p__57083","vec__57084","retract-blocks","delete-linked-refs","athens.db/replace-linked-refs","p__57087","vec__57088","sidebar-ents","G__57091","G__57092","p__57093","vec__57094","db-filepath","datascript.transit/write-transit-str","temp__5735__auto__","prev","p1__57097#","athens.db/find-prev","athens.db/history","next","p1__57098#","athens.db/find-next","p__57099","vec__57100","or__4126__auto__","p__57103","vec__57104","athens.events/backspace","value","map__57107","children","reindex","athens.db/dec-after","prev-sib-order","prev-sib","G__57109","G__57110","G__57111","G__57112","G__57113","athens.db/rules","retract-block","new-parent","and__4115__auto__","clojure.string/blank?","cljs.core/not-empty","retracts","cljs.core.mapv","new-prev-block","p__57114","vec__57115","athens.events/split-block","val","map__57118","open","head","cljs.core.subs","tail","new-uid","next-block","athens.db/inc-after","new-block","athens.events/split-block-to-children","p__57120","vec__57121","athens.events/bump-up","athens.events/new-block","athens.events/add-child","map__57124","p-eid","new-child","p__57126","vec__57127","p__57130","vec__57131","p__57134","vec__57135","p__57138","vec__57139","athens.events/enter","d-key-down","map__57142","root-block?","cljs.core/boolean","context-root-uid","start","event","cljs.core/empty?","p__57144","p__57145","map__57146","vec__57147","d-event","athens.events/indent","map__57151","end","block-zero?","older-sib","athens.db/get-older-sib","retract","new-older-sib","p__57153","vec__57154","athens.events/indent-multi","blocks","p1__57157#","same-parent?","athens.db/same-parent?","n-blocks","first-block","last-block","n-sib","new-blocks","cljs.core.map_indexed","p__57158","vec__57159","athens.events/unindent","map__57162","grandpa","reindex-grandpa","reindex-parent","new-grandpa","p__57164","p__57165","map__57166","vec__57167","athens.events/unindent-multi","p1__57171#","o-parent","athens.db/plus-after","p__57172","p__57173","map__57174","vec__57175","athens.events/drop-child","source","source-parent","new-source-block","reindex-source-parent","reindex-target-parent","new-source-parent","new-target-parent","p__57179","vec__57180","athens.events/between","s","t","athens.events/drop-same-parent","kind","s-order","t-order","target-above?","+or-","cljs.core/+","cljs.core/-","above?","below?","lower-bound","upper-bound","G__57187","G__57188","G__57189","G__57190","G__57191","G__57192","G__57193","new-source-order","new-parent-children","p__57198","vec__57199","athens.events/drop-diff-parent","target-parent","p__57206","vec__57207","athens.events/drop-bullet","source-uid","target-uid","p__57210","vec__57211","athens.events/drop-multi-same-parent-all","source-uids","source-blocks","p1__57214#","f-source","l-source","f-s-order","l-s-order","G__57218","G__57219","G__57220","G__57221","G__57222","G__57223","G__57224","G__57225","new-source-blocks","new-order","G__57226","G__57227","cljs.core/reverse","athens.events/drop-multi-same-source-parents","p1__57228#","last-source","last-s-order","bound","athens.events/drop-multi-diff-source-parents","filtered-children","G__57236","G__57237","G__57238","G__57239","G__57240","G__57241","athens.db/not-contains?","p1__57230#","athens.db/last-child?","new-source-uids","source-parents","p1__57231#","p1__57232#","last-s-parent","reindex-last-source-parent","p1__57235#","cljs.core/identity","athens.events/drop-multi-child","p1__57251#","p1__57252#","p__57257","vec__57258","p__57261","vec__57262","p__57265","vec__57266","p__57271","vec__57273","first-source-parent","athens.events/drop-bullet-multi","same-parent-all?","same-parent-source?","diff-parents-source?","first-source-uid","p__57283","vec__57284","athens.events/text-to-blocks","text","root-order","lines","clojure.string/split-lines","left-counts","p1__57288#","cljs.core/re-find","p1__57289#","sanitize","clojure.string/replace","parents","i","res","j","curr-count","prev-count","cljs.core/group-by","cljs.core/>","p__57301","vec__57302","_tempid","data","map__57308","new-res","cljs.core.swap_BANG_","cljs.core/next","p__57314","vec__57317","map__57320","map__57321","athens.keybindings/destruct-target","js/document.activeElement","empty-block?","block-start?","parent?","start-idx","cljs.core.atom","paste-tx-data","start-reindex","amount","map__57325","string","athens.events/left-sidebar-drop-above","source-eid","G__57330","G__57331","G__57332","new-source","inc-or-dec","cljs.core/dec","new-indices","G__57336","G__57337","G__57338","G__57339","G__57340","G__57341","p__57343","vec__57344","e57347","p__57348","vec__57349","source-order","target-order","athens.events/left-sidebar-drop-below","G__57357","G__57358","G__57359","G__57360","G__57361","G__57362","G__57363","G__57364","p__57367","vec__57368","e57371","p__57376","vec__57377"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db :refer [retract-uid-recursively inc-after dec-after plus-after minus-after]]\n    [athens.keybindings :as keybindings]\n    [athens.style :as style]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [clojure.string :as string]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx subscribe]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-fx\n  :db/update-filepath\n  (fn [{:keys [db]} [_ filepath]]\n    {:db (assoc db :db/filepath filepath)\n     :local-storage/set! [\"db/filepath\" filepath]}))\n\n\n(reg-event-db\n  :db/sync\n  (fn [db [_]]\n    (assoc db :db/synced true)))\n\n\n(reg-event-db\n  :db/not-synced\n  (fn [db [_]]\n    (assoc db :db/synced false)))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n(reg-event-db\n  :right-sidebar/set-width\n  (fn [db [_ width]]\n    (assoc db :right-sidebar/width width)))\n\n\n(reg-event-db\n  :mouse-down/set\n  (fn [db _]\n    (assoc db :mouse-down true)))\n\n\n(reg-event-db\n  :mouse-down/unset\n  (fn [db _]\n    (assoc db :mouse-down false)))\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (let [{:right-sidebar/keys [items]} db]\n      (cond-> (update db :right-sidebar/items dissoc uid)\n        (= 1 (count items)) (assoc :right-sidebar/open false)))))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n(reg-event-fx\n  :editing/uid\n  (fn [{:keys [db]} [_ uid index]]\n    {:db            (assoc db :editing/uid uid)\n     :editing/focus [uid index]}))\n\n\n(reg-event-fx\n  :editing/target\n  (fn [{:keys [db]} [_ target]]\n    (let [uid (-> (.. target -id)\n                  (string/split \"editable-uid-\")\n                  second)]\n      {:db (assoc db :editing/uid uid)})))\n\n\n(reg-event-db\n  :selected/add-item\n  (fn [db [_ uid]]\n    (update db :selected/items conj uid)))\n\n\n(reg-event-db\n  :selected/remove-item\n  (fn [db [_ uid]]\n    (let [items (:selected/items db)]\n      (assoc db :selected/items (filterv #(not= % uid) items)))))\n\n\n(reg-event-db\n  :selected/add-items\n  (fn [db [_ uids]]\n    (update db :selected/items concat uids)))\n\n\n(reg-event-db\n  :selected/clear-items\n  (fn [db _]\n    (assoc db :selected/items [])))\n\n\n(defn select-up\n  [selected-items]\n  (let [first-item      (first selected-items)\n        prev-block-uid- (db/prev-block-uid first-item)\n        prev-block      (db/get-block [:block/uid prev-block-uid-])\n        parent          (db/get-parent [:block/uid first-item])\n        editing-uid     @(subscribe [:editing/uid])\n        editing-idx     (first (keep-indexed (fn [idx x]\n                                               (when (= x editing-uid)\n                                                 idx))\n                                             selected-items))\n        n               (count selected-items)\n        new-items (cond\n                    ;; if prev-block is root node TODO: (OR context root), don't do anything\n                    (and (zero? editing-idx) (> n 1)) (pop selected-items)\n                    (:node/title prev-block) selected-items\n                    ;; if prev block is parent, replace editing/uid and first item w parent; remove children\n                    (= (:block/uid parent) prev-block-uid-) (let [parent-children (-> (map #(:block/uid %) (:block/children parent))\n                                                                                      set)\n                                                                  to-keep         (filter (fn [x] (not (contains? parent-children x)))\n                                                                                          selected-items)\n                                                                  new-vec         (into [prev-block-uid-] to-keep)]\n                                                              new-vec)\n                    :else (into [prev-block-uid-] selected-items))]\n    new-items))\n\n\n(reg-event-db\n  :selected/up\n  (fn [db [_ selected-items]]\n    (assoc db :selected/items (select-up selected-items))))\n\n\n(defn select-down\n  [selected-items]\n  (let [editing-uid @(subscribe [:editing/uid])\n        editing-idx (first (keep-indexed (fn [idx x]\n                                           (when (= x editing-uid)\n                                             idx))\n                                         selected-items))\n        last-item (last selected-items)\n        next-block-uid- (db/next-block-uid last-item true)]\n    (cond\n      (pos? editing-idx) (subvec selected-items 1)\n      next-block-uid-    (conj selected-items next-block-uid-)\n      :else selected-items)))\n\n\n;; using a set or a hash map, we would need a secondary editing/uid to maintain the head/tail position\n;; this would let us know if the operation is additive or subtractive\n(reg-event-db\n  :selected/down\n  (fn [db [_ selected-items]]\n    (assoc db :selected/items (select-down selected-items))))\n\n\n(defn delete-selected\n  \"We know that we only need to dec indices after the last block. The former blocks are necessarily going to remove all\n  tail children, meaning we only need to be concerned with the last N blocks that are selected, adjacent siblings, to\n  determine the minus-after value.\"\n  [selected-items]\n  (let [last-item (last selected-items)\n        selected-sibs-of-last (->> (d/q '[:find ?sib-uid ?o\n                                          :in $ ?uid [?selected ...]\n                                          :where\n                                          ;; get all siblings of the last block\n                                          [?e :block/uid ?uid]\n                                          [?p :block/children ?e]\n                                          [?p :block/children ?sib]\n                                          [?sib :block/uid ?sib-uid]\n                                          ;; filter selected\n                                          [(= ?sib-uid ?selected)]\n                                          [?sib :block/order ?o]]\n                                        @db/dsdb last-item selected-items)\n                                   (sort-by second))\n        [uid order] (last selected-sibs-of-last)\n        parent (db/get-parent [:block/uid uid])\n        n (count selected-sibs-of-last)]\n    (minus-after (:db/id parent) order n)))\n\n\n(reg-event-fx\n  :selected/delete\n  (fn [{:keys [db]} [_ selected-items]]\n    (let [retract-vecs (mapcat #(retract-uid-recursively %) selected-items)\n          reindex-last-selected-parent (delete-selected selected-items)\n          tx-data (concat retract-vecs reindex-last-selected-parent)]\n      {:dispatch [:transact tx-data]\n       :db       (assoc db :selected/items [])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Modal\n\n\n(reg-event-db\n  :modal/toggle\n  (fn [db _]\n    (update db :modal not)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n(reg-event-db\n  :daily-notes/add\n  (fn [db [_ uid]]\n    (assoc db :daily-notes/items [uid])))\n\n\n(reg-event-fx\n  :daily-note/prev\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items (fn [items]\n                                                 (into [uid] items)))]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:fx [[:dispatch [:reset-conn new-db]\n             :dispatch [:local-storage/set-db new-db]]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n(reg-event-fx\n  :local-storage/set-theme\n  [(inject-cofx :local-storage \"theme/dark\")]\n  (fn [{:keys [local-storage db]} _]\n    (let [is-dark (= \"true\" local-storage)\n          theme   (if is-dark style/THEME-DARK style/THEME-LIGHT)]\n      {:db          (assoc db :theme/dark is-dark)\n       :stylefy/tag [\":root\" (style/permute-color-opacities theme)]})))\n\n\n(reg-event-fx\n  :theme/toggle\n  (fn [{:keys [db]} _]\n    (let [dark?    (:theme/dark db)\n          new-dark (not dark?)\n          theme    (if dark? style/THEME-LIGHT style/THEME-DARK)]\n      {:db                 (assoc db :theme/dark new-dark)\n       :local-storage/set! [\"theme/dark\" new-dark]\n       :stylefy/tag        [\":root\" (style/permute-color-opacities theme)]})))\n\n\n;; Datascript\n\n\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ tx-data]]\n    ;; always stay synced for now because auto-saving\n    (let [synced? @(subscribe [:db/synced])]\n      {:fx [(when synced? [:dispatch [:db/not-synced]])\n            [:dispatch [:save]]\n            [:transact! tx-data]]})))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:fx [[:dispatch [:transact [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]]]\n            [:dispatch [:editing/uid child-uid]]]})))\n\n\n(reg-event-fx\n  :page/delete\n  (fn [_ [_ uid title]]\n    (let [retract-blocks     (retract-uid-recursively uid)\n          delete-linked-refs (db/replace-linked-refs title)\n          tx-data            (concat retract-blocks\n                                     delete-linked-refs)]\n      {:fx [[:dispatch [:transact tx-data]]]})))\n\n\n(reg-event-fx\n  :page/add-shortcut\n  (fn [_ [_ uid]]\n    (let [sidebar-ents (d/q '[:find ?e\n                              :where\n                              [?e :page/sidebar _]]\n                            @db/dsdb)]\n      {:fx [[:dispatch [:transact [{:block/uid uid :page/sidebar (count sidebar-ents)}]]]]})))\n\n\n;; TODO: reindex\n(reg-event-fx\n  :page/remove-shortcut\n  (fn [_ [_ uid]]\n    {:fx [[:dispatch [:transact [[:db/retract [:block/uid uid] :page/sidebar]]]]]}))\n\n\n(reg-event-fx\n  :save\n  (fn [_ _]\n    (let [db-filepath (subscribe [:db/filepath])]\n      {:fs/write!  [@db-filepath (dt/write-transit-str @db/dsdb)]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n(defn backspace\n  \"If root and 0th child, 1) if value, no-op, 2) if blank value, delete only block.\n  No-op if parent is prev-block and block has children.\n  No-op if prev-sibling-block has children.\n  Otherwise delete block and join with previous block\n  If prev-block has children\"\n  [uid value]\n  (let [block           (db/get-block [:block/uid uid])\n        {:block/keys [children order] :or {children []}} block\n        parent          (db/get-parent [:block/uid uid])\n        reindex         (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (db/prev-block-uid uid)\n        prev-block      (db/get-block [:block/uid prev-block-uid-])\n        prev-sib-order  (dec (:block/order block))\n        prev-sib        (d/q '[:find ?sib .\n                               :in $ % ?target-uid ?prev-sib-order\n                               :where\n                               (siblings ?target-uid ?sib)\n                               [?sib :block/order ?prev-sib-order]\n                               [?sib :block/uid ?uid]\n                               [?sib :block/children ?ch]]\n                             @db/dsdb db/rules uid prev-sib-order)\n        prev-sib        (db/get-block prev-sib)\n        retract-block  [:db/retractEntity (:db/id block)]\n        new-parent     {:db/id (:db/id parent) :block/children reindex}]\n    (cond\n      (and (:node/title parent) (zero? order)) (when (clojure.string/blank? value)\n                                                 (let [tx-data [retract-block new-parent]]\n                                                   {:dispatch-n [[:transact tx-data]\n                                                                 [:editing/uid nil]]}))\n      (and (not-empty children) (not-empty (:block/children prev-sib))) nil\n      (and (not-empty children) (= parent prev-block)) nil\n      :else (let [retracts       (mapv (fn [x] [:db/retract (:db/id block) :block/children (:db/id x)]) children)\n                  new-prev-block {:db/id          [:block/uid prev-block-uid-]\n                                  :block/string   (str (:block/string prev-block) value)\n                                  :block/children children}\n                  tx-data        (conj retracts retract-block new-prev-block new-parent)]\n              {:dispatch-later [{:ms 0 :dispatch [:transact tx-data]}\n                                {:ms 10 :dispatch [:editing/uid prev-block-uid- (count (:block/string prev-block))]}]}))))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index]\n  (let [parent     (db/get-parent [:block/uid uid])\n        block      (db/get-block [:block/uid uid])\n        {:block/keys [order children open] :or {children []}} block\n        head       (subs val 0 index)\n        tail       (subs val index)\n        new-uid    (gen-block-uid)\n        retracts   (mapv (fn [x] [:db/retract (:db/id block) :block/children (:db/id x)])\n                         children)\n        next-block  {:db/id          -1\n                     :block/order    (inc order)\n                     :block/uid      new-uid\n                     :block/open     open\n                     :block/children children\n                     :block/string   tail}\n        reindex    (->> (inc-after (:db/id parent) order)\n                        (concat [next-block]))\n        new-block  {:db/id (:db/id block) :block/string head}\n        new-parent {:db/id (:db/id parent) :block/children reindex}\n        tx-data    (conj retracts new-block new-parent)]\n    {:fx [[:dispatch [:transact tx-data]]\n          [:dispatch [:editing/uid new-uid]]]}))\n\n\n(defn split-block-to-children\n  \"Takes a block uid, its value, and the index to split the value string.\n  It sets the value of the block to the head of (subs val 0 index)\n  It then creates a new child block with the tail of the string set as its value and sets editing to that block.\"\n  [uid val index]\n  (let [block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  0\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id block) -1)\n                     (concat [new-block]))]\n    {:fx [[:dispatch [:transact [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}\n                                 {:db/id (:db/id block)\n                                  :block/children reindex}]]]\n          [:dispatch [:editing/uid new-uid]]]}))\n\n\n(reg-event-fx\n  :split-block-to-children\n  (fn [_ [_ uid val index]]\n    (split-block-to-children uid val index)))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent    (db/get-parent [:block/uid uid])\n        block     (db/get-block [:block/uid uid])\n        new-uid   (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex   (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                       (concat [new-block]))]\n    {:fx [[:dispatch [:transact [{:db/id (:db/id parent) :block/children reindex}]]]\n          [:dispatch [:editing/uid new-uid]]]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:fx [[:dispatch [:transact [{:db/id          [:block/uid (:block/uid parent)]\n                                  :block/children reindex}]]]\n          [:dispatch [:editing/uid new-uid]]]}))\n\n\n(defn add-child\n  [block]\n  (let [{p-eid :db/id} block\n        new-uid   (gen-block-uid)\n        new-child {:block/uid new-uid :block/string \"\" :block/order 0 :block/open true}\n        reindex   (->> (inc-after p-eid -1)\n                       (concat [new-child]))\n        new-block {:db/id p-eid :block/children reindex}\n        tx-data   [new-block]]\n    {:fx [[:dispatch [:transact tx-data]]\n          [:dispatch [:editing/uid new-uid]]]}))\n\n\n(reg-event-fx\n  :enter/add-child\n  (fn [_ [_ block]]\n    (add-child block)))\n\n\n(reg-event-fx\n  :enter/split-block\n  (fn [_ [_ uid val index]]\n    (split-block uid val index)))\n\n\n(reg-event-fx\n  :enter/bump-up\n  (fn [_ [_ uid]]\n    (bump-up uid)))\n\n\n(reg-event-fx\n  :enter/new-block\n  (fn [_ [_ block parent]]\n    (new-block block parent)))\n\n\n(defn enter\n  \"- If block is open, has children, and caret at end, create new child\n  - If block is CLOSED, has children, and caret at end, add a sibling block.\n  - If value is empty and a root block, add a sibling block.\n  - If caret is not at start, split block in half.\n  - If block has children and is closed, if at end, just add another child.\n  - If block has children and is closed and is in middle of block, split block.\n  - If value is empty, unindent.\n  - If caret is at start and there is a value, create new block below but keep same block index.\"\n  [rfdb uid d-key-down]\n  (let [block            (db/get-block [:block/uid uid])\n        parent           (db/get-parent [:block/uid uid])\n        root-block?      (boolean (:node/title parent))\n        context-root-uid (get-in rfdb [:current-route :path-params :id])\n        {:keys [value start]} d-key-down\n        event            (cond\n                           (and (:block/open block)\n                                (not-empty (:block/children block))\n                                (= start (count value)))\n                           [:enter/add-child block]\n\n                           (and (not (:block/open block))\n                                (not-empty (:block/children block))\n                                (= start (count value)))\n                           [:enter/new-block block parent]\n\n                           (and (empty? value)\n                                (or (= context-root-uid (:block/uid parent))\n                                    root-block?))\n                           [:enter/new-block block parent]\n\n                           (not (zero? start))\n                           [:enter/split-block uid value start]\n\n                           (empty? value)\n                           [:unindent uid d-key-down context-root-uid]\n\n                           (and (zero? start) value)\n                           [:enter/bump-up uid])]\n    {:dispatch event}))\n\n\n(reg-event-fx\n  :enter\n  (fn [{rfdb :db} [_ uid d-event]]\n    (enter rfdb uid d-event)))\n\n\n(defn indent\n  \"When indenting a single block:\n  - retract block from parent\n  - make block the last child of older sibling\n  - reindex parent\n  Only indent a block if it is not the zeroth block (first child).\n\n  Uses `value` to update block/string as well. Otherwise, if user changes block string and indents, the local string\n  is reset to original value, since it has not been unfocused yet (which is currently the transaction that updates the string).\"\n  [uid d-key-down]\n  (let [{:keys [value start end]} d-key-down\n        block       (db/get-block [:block/uid uid])\n        block-zero? (zero? (:block/order block))]\n    (when-not block-zero?\n      (let [parent        (db/get-parent [:block/uid uid])\n            older-sib     (db/get-older-sib uid)\n            new-block     {:db/id (:db/id block) :block/order (count (:block/children older-sib)) :block/string value}\n            reindex       (dec-after (:db/id parent) (:block/order block))\n            retract       [:db/retract (:db/id parent) :block/children (:db/id block)]\n            new-older-sib {:db/id (:db/id older-sib) :block/children [new-block] :block/open true}\n            new-parent    {:db/id (:db/id parent) :block/children reindex}\n            tx-data       [retract new-older-sib new-parent]]\n        {:dispatch            [:transact tx-data]\n         :set-cursor-position [uid start end]}))))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid d-event]]\n    (indent uid d-event)))\n\n\n(defn indent-multi\n  \"Only indent if all blocks are siblings, and first block is not already a zeroth child (root child).\n\n  older-sib is the current older-sib, before indent happens, AKA the new parent.\n  new-parent is current parent, not older-sib. new-parent becomes grandparent.\n  Reindex parent, add blocks to end of older-sib.\"\n  [uids]\n  (let [blocks       (map #(db/get-block [:block/uid %]) uids)\n        same-parent? (db/same-parent? uids)\n        n-blocks     (count blocks)\n        first-block  (first blocks)\n        last-block   (last blocks)\n        block-zero?  (-> first-block :block/order zero?)]\n    (when (and same-parent? (not block-zero?))\n      (let [parent        (db/get-parent [:block/uid (first uids)])\n            older-sib     (db/get-older-sib (first uids))\n            n-sib         (count (:block/children older-sib))\n            new-blocks    (map-indexed (fn [idx x] {:db/id (:db/id x) :block/order (+ idx n-sib)})\n                                       blocks)\n            new-older-sib {:db/id (:db/id older-sib) :block/children new-blocks :block/open true}\n            reindex       (minus-after (:db/id parent) (:block/order last-block) n-blocks)\n            new-parent    {:db/id (:db/id parent) :block/children reindex}\n            retracts      (mapv (fn [x] [:db/retract (:db/id parent) :block/children (:db/id x)])\n                                blocks)\n            tx-data       (conj retracts new-older-sib new-parent)]\n        {:fx [[:dispatch [:transact tx-data]]]}))))\n\n\n(reg-event-fx\n  :indent/multi\n  (fn [_ [_ uids]]\n    (indent-multi uids)))\n\n\n(defn unindent\n  \"If parent is context-root or has node/title (date page), no-op.\n  Otherwise, block becomes direct older sibling of parent (parent-order +1). reindex parent and grandparent.\n   - inc-after for grandparent\n   - dec-after for parent\"\n  [uid d-key-down context-root-uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        {:keys [value start end]} d-key-down]\n    (cond\n      (:node/title parent) nil\n      (= (:block/uid parent) context-root-uid) nil\n      :else (let [block           (db/get-block [:block/uid uid])\n                  grandpa         (db/get-parent (:db/id parent))\n                  new-block       {:block/uid uid :block/order (inc (:block/order parent)) :block/string value}\n                  reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                                       (concat [new-block]))\n                  reindex-parent  (dec-after (:db/id parent) (:block/order block))\n                  new-parent      {:db/id (:db/id parent) :block/children reindex-parent}\n                  retract         [:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                  new-grandpa     {:db/id (:db/id grandpa) :block/children reindex-grandpa}\n                  tx-data         [retract new-parent new-grandpa]]\n              {:dispatch            [:transact tx-data]\n               :set-cursor-position [uid start end]}))))\n\n\n(reg-event-fx\n  :unindent\n  (fn [{rfdb :db} [_ uid d-event]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent uid d-event context-root-uid))))\n\n\n(defn unindent-multi\n  \"Do not do anything if root block child or if blocks are not siblings.\n  Otherwise, retract and assert new parent for each block, and reindex parent and grandparent.\"\n  [uids context-root-uid]\n  (let [parent (db/get-parent [:block/uid (first uids)])\n        same-parent? (db/same-parent? uids)]\n    (cond\n      (:node/title parent) nil\n      (= (:block/uid parent) context-root-uid) nil\n      (not same-parent?) nil\n      :else (let [grandpa         (db/get-parent (:db/id parent))\n                  blocks          (map #(db/get-block [:block/uid %]) uids)\n                  o-parent        (:block/order parent)\n                  n-blocks        (count blocks)\n                  last-block      (last blocks)\n                  reindex-parent  (minus-after (:db/id parent) (:block/order last-block) n-blocks)\n                  new-parent      {:db/id (:db/id parent) :block/children reindex-parent}\n                  new-blocks      (map-indexed (fn [idx uid] {:block/uid uid :block/order (+ idx (inc o-parent))})\n                                               uids)\n                  reindex-grandpa (->> (plus-after (:db/id grandpa) (:block/order parent) n-blocks)\n                                       (concat new-blocks))\n                  retracts        (mapv (fn [x] [:db/retract (:db/id parent) :block/children (:db/id x)])\n                                        blocks)\n                  new-grandpa     {:db/id (:db/id grandpa) :block/children reindex-grandpa}\n                  tx-data         (conj retracts new-parent new-grandpa)]\n              {:fx [[:dispatch [:transact tx-data]]]}))))\n\n\n(reg-event-fx\n  :unindent/multi\n  (fn [{rfdb :db} [_ uids]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent-multi uids context-root-uid))))\n\n\n(defn drop-child\n  \"Order will always be 0\"\n  [source source-parent target]\n  (let [new-source-block      {:block/uid (:block/uid source) :block/order 0}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (inc-after (:db/id target) -1)\n        retract               [:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]]\n        new-source-parent     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n        new-target-parent     {:db/id (:db/id target) :block/children (conj reindex-target-parent new-source-block)}\n        tx-data               [retract\n                               new-source-parent\n                               new-target-parent]]\n    tx-data))\n\n\n(reg-event-fx\n  :drop/child\n  (fn [_ [_ source source-parent target]]\n    {:dispatch [:transact (drop-child source source-parent target)]}))\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn drop-same-parent\n  [kind source parent target]\n  (let [s-order             (:block/order source)\n        t-order             (:block/order target)\n        target-above?       (< t-order s-order)\n        +or-                (if target-above? + -)\n        above?              (= kind :above)\n        below?              (= kind :below)\n        lower-bound         (cond\n                              (and above? target-above?) (dec t-order)\n                              (and below? target-above?) t-order\n                              :else s-order)\n        upper-bound         (cond\n                              (and above? (not target-above?)) t-order\n                              (and below? (not target-above?)) (inc t-order)\n                              :else s-order)\n        reindex             (d/q '[:find ?ch ?new-order\n                                   :keys db/id block/order\n                                   :in $ % ?+or- ?parent ?lower-bound ?upper-bound\n                                   :where\n                                   (between ?parent ?lower-bound ?upper-bound ?ch ?order)\n                                   [(?+or- ?order 1) ?new-order]]\n                                 @db/dsdb db/rules +or- (:db/id parent) lower-bound upper-bound)\n        new-source-order    (cond\n                              (and above? target-above?) t-order\n                              (and above? (not target-above?)) (dec t-order)\n                              (and below? target-above?) (inc t-order)\n                              (and below? (not target-above?)) t-order)\n        new-source-block    {:db/id (:db/id source) :block/order new-source-order}\n        new-parent-children (concat [new-source-block] reindex)\n        new-parent          {:db/id (:db/id parent) :block/children new-parent-children}\n        tx-data             [new-parent]]\n    tx-data))\n\n\n(reg-event-fx\n  :drop/same\n  (fn [_ [_ kind source parent target]]\n    {:dispatch [:transact (drop-same-parent kind source parent target)]}))\n\n\n(defn drop-diff-parent\n  \"- Give source-block target-block's order.\n  - inc-after target\n  - dec-after source\"\n  [kind source source-parent target target-parent]\n  (let [t-order               (:block/order target)\n        new-block             {:db/id (:db/id source) :block/order (if (= kind :above)\n                                                                     t-order\n                                                                     (inc t-order))}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:db/id target-parent) (if (= kind :above)\n                                                                       (dec t-order)\n                                                                       t-order))\n                                   (concat [new-block]))\n        retract               [:db/retract (:db/id source-parent) :block/children (:db/id source)]\n        new-source-parent     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n        new-target-parent     {:db/id (:db/id target-parent) :block/children reindex-target-parent}]\n    [retract\n     new-source-parent\n     new-target-parent]))\n\n\n(reg-event-fx\n  :drop/diff\n  (fn [_ [_ kind source source-parent target target-parent]]\n    {:dispatch [:transact (drop-diff-parent kind source source-parent target target-parent)]}))\n\n\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])\n        same-parent?  (= source-parent target-parent)\n        event         (cond\n                        (= kind :child) [:drop/child source source-parent target]\n                        same-parent? [:drop/same kind source source-parent target]\n                        (not same-parent?) [:drop/diff kind source source-parent target target-parent])]\n    {:dispatch event}))\n\n\n(reg-event-fx\n  :drop\n  (fn [_ [_ source-uid target-uid kind]]\n    (drop-bullet source-uid target-uid kind)))\n\n\n(defn drop-multi-same-parent-all\n  [kind source-uids parent target]\n  (let [source-blocks       (mapv #(db/get-block [:block/uid %]) source-uids)\n        f-source            (first source-blocks)\n        l-source            (last source-blocks)\n        f-s-order           (:block/order f-source)\n        l-s-order           (:block/order l-source)\n        t-order             (:block/order target)\n        target-above?       (< t-order f-s-order)\n        +or-                (if target-above? + -)\n        above?              (= kind :above)\n        below?              (= kind :below)\n        lower-bound         (cond\n                              (and above? target-above?) (dec t-order)\n                              (and below? target-above?) t-order\n                              :else l-s-order)\n        upper-bound         (cond\n                              (and above? (not target-above?)) t-order\n                              (and below? (not target-above?)) (inc t-order)\n                              :else f-s-order)\n        n                   (count source-uids)\n        reindex             (d/q '[:find ?ch ?new-order\n                                   :keys db/id block/order\n                                   :in $ % ?+or- ?parent ?lower-bound ?upper-bound ?n\n                                   :where\n                                   (between ?parent ?lower-bound ?upper-bound ?ch ?order)\n                                   [(?+or- ?order ?n) ?new-order]]\n                                 @db/dsdb db/rules +or- (:db/id parent) lower-bound upper-bound n)\n        new-source-blocks   (if target-above?\n                              (map-indexed (fn [idx x]\n                                             (let [new-order (cond-> (+ idx t-order) below? inc)]\n                                               {:db/id       (:db/id x)\n                                                :block/order new-order}))\n                                           source-blocks)\n                              (map-indexed (fn [idx x]\n                                             (let [new-order (cond-> (- t-order idx) above? dec)]\n                                               {:db/id       (:db/id x)\n                                                :block/order new-order}))\n                                           (reverse source-blocks)))\n        new-parent-children (concat new-source-blocks reindex)\n        new-parent          {:db/id (:db/id parent) :block/children new-parent-children}\n        tx-data             [new-parent]]\n    tx-data))\n\n\n(defn drop-multi-same-source-parents\n  [kind source-uids source-parent target target-parent]\n  (let [source-blocks         (mapv #(db/get-block [:block/uid %]) source-uids)\n        last-source           (last source-blocks)\n        last-s-order          (:block/order last-source)\n        t-order               (:block/order target)\n        n                     (count source-uids)\n        new-source-blocks     (map-indexed (fn [idx x]\n                                             (let [new-order (if (= kind :above)\n                                                               (+ idx t-order)\n                                                               (inc (+ idx t-order)))]\n                                               {:db/id (:db/id x) :block/order new-order}))\n                                           source-blocks)\n        reindex-source-parent (minus-after (:db/id source-parent) last-s-order n)\n        bound                 (if (= kind :above) (dec t-order) t-order)\n        reindex-target-parent (->> (plus-after (:db/id target-parent) bound n)\n                                   (concat new-source-blocks))\n        retracts              (map (fn [x] [:db/retract (:db/id source-parent) :block/children [:block/uid x]])\n                                   source-uids)\n        new-source-parent     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n        new-target-parent     {:db/id (:db/id target-parent) :block/children reindex-target-parent}\n        tx-data               (conj retracts new-source-parent new-target-parent)]\n    tx-data))\n\n\n(defn drop-multi-diff-source-parents\n  \"Only reindex after last target. plus-after\"\n  [kind source-uids target target-parent]\n  (let [filtered-children          (->> (d/q '[:find ?children-uid ?o\n                                               :keys block/uid block/order\n                                               :in $ % ?target-uid ?not-contains? ?source-uids\n                                               :where\n                                               (siblings ?target-uid ?children-e)\n                                               [?children-e :block/uid ?children-uid]\n                                               [(?not-contains? ?source-uids ?children-uid)]\n                                               [?children-e :block/order ?o]]\n                                             @db/dsdb db/rules (:block/uid target) db/not-contains? (set source-uids))\n                                        (sort-by :block/order)\n                                        (mapv #(:block/uid %)))\n        t-order                    (:block/order target)\n        index                      (cond\n                                     (= kind :above) t-order\n                                     (and (= kind :below) (db/last-child? (:block/uid target))) t-order\n                                     (= kind :below) (inc t-order))\n        n                          (count filtered-children)\n        head                       (subvec filtered-children 0 index)\n        tail                       (subvec filtered-children index n)\n        new-vec                    (concat head source-uids tail)\n        new-source-uids            (map-indexed (fn [idx uid] {:block/uid uid :block/order idx}) new-vec)\n        source-parents             (mapv #(db/get-parent [:block/uid %]) source-uids)\n        source-blocks              (mapv #(db/get-block [:block/uid %]) source-uids)\n        last-s-parent              (last source-parents)\n        last-s-order               (:block/order (last source-blocks))\n        n                          (count (filter (fn [x] (= (:block/uid x) (:block/uid last-s-parent))) source-parents))\n        reindex-last-source-parent (minus-after (:db/id last-s-parent) last-s-order n)\n        source-parents             (mapv #(db/get-parent [:block/uid %]) source-uids)\n        retracts                   (mapv (fn [uid parent] [:db/retract (:db/id parent) :block/children [:block/uid uid]])\n                                         source-uids\n                                         source-parents)\n        new-target-parent          {:db/id (:db/id target-parent) :block/children new-source-uids}\n        ;; need to reindex last-source-parent but requires more index management depending on the level of the target parent\n        new-source-parent          {:db/id (:db/id last-s-parent) :block/children reindex-last-source-parent}\n        tx-data                    (conj retracts new-target-parent #_new-source-parent)]\n    (identity new-source-parent)\n    tx-data))\n\n\n(defn drop-multi-child\n  [source-uids target]\n  (let [source-blocks         (mapv #(db/get-block [:block/uid %]) source-uids)\n        source-parents        (mapv #(db/get-parent [:block/uid %]) source-uids)\n        last-source           (last source-blocks)\n        last-s-order          (:block/order last-source)\n        last-s-parent         (last source-parents)\n        new-source-blocks     (map-indexed (fn [idx x] {:block/uid (:block/uid x) :block/order idx})\n                                           source-blocks)\n        n                     (count (filter (fn [x] (= (:block/uid x) (:block/uid last-s-parent))) source-parents))\n        reindex-source-parent (minus-after (:db/id last-s-parent) last-s-order n)\n        reindex-target-parent (plus-after (:db/id target) -1 n)\n        retracts              (mapv (fn [uid parent] [:db/retract (:db/id parent) :block/children [:block/uid uid]])\n                                    source-uids\n                                    source-parents)\n        new-source-parent     {:db/id (:db/id last-s-parent) :block/children reindex-source-parent}\n        new-target-parent     {:db/id (:db/id target) :block/children (concat reindex-target-parent new-source-blocks)}\n        tx-data               (conj retracts new-source-parent new-target-parent)]\n    tx-data))\n\n\n(reg-event-fx\n  :drop-multi/child\n  (fn [_ [_ source-uid target]]\n    {:dispatch [:transact (drop-multi-child source-uid target)]}))\n\n\n(reg-event-fx\n  :drop-multi/same-all\n  (fn [_ [_ kind source-uids parent target]]\n    {:dispatch [:transact (drop-multi-same-parent-all kind source-uids parent target)]}))\n\n\n(reg-event-fx\n  :drop-multi/diff-source\n  (fn [_ [_ kind source-uids target target-parent]]\n    {:dispatch [:transact (drop-multi-diff-source-parents kind source-uids target target-parent)]}))\n\n\n(reg-event-fx\n  :drop-multi/same-source\n  (fn [_ [_ kind source-uids first-source-parent target target-parent]]\n    {:dispatch [:transact (drop-multi-same-source-parents kind source-uids first-source-parent target target-parent)]}))\n\n\n(defn drop-bullet-multi\n  \"Cases:\n  - the same 4 cases from drop-bullet\n  - but also if blocks span across multiple parent levels\"\n  [source-uids target-uid kind]\n  (let [same-parent-all?     (db/same-parent? (conj source-uids target-uid))\n        same-parent-source?  (db/same-parent? source-uids)\n        diff-parents-source? (not same-parent-source?)\n        target               (db/get-block [:block/uid target-uid])\n        first-source-uid     (first source-uids)\n        first-source-parent  (db/get-parent [:block/uid first-source-uid])\n        target-parent        (db/get-parent [:block/uid target-uid])\n        event                (cond\n                               (= kind :child) [:drop-multi/child source-uids target]\n                               (and same-parent-all?) [:drop-multi/same-all kind source-uids first-source-parent target]\n                               (and diff-parents-source?) [:drop-multi/diff-source kind source-uids target target-parent]\n                               (and same-parent-source?) [:drop-multi/same-source kind source-uids first-source-parent target target-parent])]\n    {:fx [[:dispatch [:selected/clear-items]]\n          [:dispatch event]]}))\n\n\n(reg-event-fx\n  :drop-multi\n  (fn [_ [_ uids target-uid kind]]\n    (drop-bullet-multi uids target-uid kind)))\n\n\n(defn text-to-blocks\n  [text uid root-order]\n  (let [;; Split raw text by line\n        lines       (clojure.string/split-lines text)\n        ;; Count left offset\n        left-counts (->> lines\n                         (map #(re-find #\"^\\s*(-|\\*)?\" %))\n                         (map #(-> % first count)))\n        ;; Trim * - and whitespace\n        sanitize    (map (fn [x] (clojure.string/replace x #\"^\\s*(-|\\*)?\\s*\" \"\"))\n                         lines)\n        ;; Generate blocks with tempids\n        blocks      (map-indexed (fn [idx x]\n                                   {:db/id        (dec (* -1 idx))\n                                    :block/string x\n                                    :block/open   true\n                                    :block/uid    (gen-block-uid)}) sanitize)\n        ;; Count blocks\n        n           (count blocks)\n        ;; Assign parents\n        parents     (loop [i   1\n                           res [(first blocks)]]\n                      (if (= n i)\n                        res\n                        ;; Nested loop: worst-case O(n^2)\n                        (recur (inc i)\n                               (loop [j (dec i)]\n                                 ;; If j is negative, that means the loop has been compared to every previous line,\n                                 ;; and there are no previous lines with smaller left-offsets, which means block i\n                                 ;; should be a root block.\n                                 ;; Otherwise, block i's parent is the first block with a smaller left-offset\n                                 (if (neg? j)\n                                   (conj res (nth blocks i))\n                                   (let [curr-count (nth left-counts i)\n                                         prev-count (nth left-counts j nil)]\n                                     (if (< prev-count curr-count)\n                                       (conj res {:db/id          (:db/id (nth blocks j))\n                                                  :block/children (nth blocks i)})\n                                       (recur (dec j)))))))))\n        ;; assign orders for children. order can be local or based on outer context where paste originated\n        ;; if local, look at order within group. if outer, use root-order\n        tx-data     (->> (group-by :db/id parents)\n                         ;; maps smaller than size 8 are ordered, larger are not https://stackoverflow.com/a/15500064\n                         (into (sorted-map-by >))\n                         (mapcat (fn [[_tempid blocks]]\n                                   (loop [order 0\n                                          res   []\n                                          data  blocks]\n                                     (let [{:block/keys [children] :as block} (first data)]\n                                       (cond\n                                         (nil? block) res\n                                         (nil? children) (let [new-res (conj res {:db/id          [:block/uid uid]\n                                                                                  :block/children (assoc block :block/order @root-order)})]\n                                                           (swap! root-order inc)\n                                                           (recur order\n                                                                  new-res\n                                                                  (next data)))\n                                         :else (recur (inc order)\n                                                      (conj res (assoc-in block [:block/children :block/order] order))\n                                                      (next data))))))))]\n    tx-data))\n\n\n;; Paste based on conditions of block where paste originated from.\n;; - If from an empty block, delete block in place and make that location the root\n;; - If at text start of non-empty block, prepend block and focus first new root\n;; - If anywhere else beyond text start of an OPEN parent block, prepend children\n;; - Otherwise append after current block.\n\n(reg-event-fx\n  :paste\n  (fn [_ [_ uid text]]\n    (let [block         (db/get-block [:block/uid uid])\n          {:block/keys [order children open]} block\n          {:keys [start value]} (keybindings/destruct-target js/document.activeElement) ; TODO: coeffect\n          empty-block?  (and (string/blank? value)\n                             (empty? children))\n          block-start?  (zero? start)\n          parent?       (and children open)\n          start-idx     (cond\n                          empty-block? order\n                          block-start? order\n                          parent? 0\n                          :else (inc order))\n          root-order    (atom start-idx)\n          parent        (cond\n                          parent? block\n                          :else (db/get-parent [:block/uid uid]))\n          paste-tx-data (text-to-blocks text (:block/uid parent) root-order)\n          ;; the delta between root-order and start-idx is how many root blocks were added\n          n             (- @root-order start-idx)\n          start-reindex (cond\n                          block-start? (dec order)\n                          parent? -1\n                          :else order)\n          amount        (cond\n                          empty-block? (dec n)\n                          :else n)\n          reindex       (plus-after (:db/id parent) start-reindex amount)\n          tx-data       (concat reindex\n                                paste-tx-data\n                                (when empty-block? [[:db/retractEntity [:block/uid uid]]]))]\n      {:dispatch-n [[:transact tx-data]\n                    (when block-start?\n                      (let [block (-> paste-tx-data first :block/children)\n                            {:block/keys [uid string]} block\n                            n     (count string)]\n                        [:editing/uid uid n]))]})))\n\n\n(defn left-sidebar-drop-above\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar (if (< s-order t-order)\n                                                      (dec t-order)\n                                                      t-order)}\n        inc-or-dec (if (< s-order t-order) dec inc)\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between ?inc-or-dec\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(?inc-or-dec ?order) ?new-order]]\n                              @db/dsdb s-order (if (< s-order t-order)\n                                                 t-order\n                                                 (dec t-order))\n                              between inc-or-dec)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-above\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-above source-order target-order)]}))\n\n\n(defn left-sidebar-drop-below\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar t-order}\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(dec ?order) ?new-order]]\n                              @db/dsdb s-order (inc t-order) between)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-below\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-below source-order target-order)]}))\n\n\n"]}