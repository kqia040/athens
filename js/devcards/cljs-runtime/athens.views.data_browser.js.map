{"version":3,"sources":["athens/views/data_browser.cljs"],"mappings":"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","names":["athens.views.data-browser/attr-unique?","attr","cljs.core/contains?","cljs.core.get","athens.db/schema","athens.views.data-browser/attr-many?","cljs.core._EQ_","cljs.core.get_in","athens.views.data-browser/attr-ref?","athens.views.data-browser/attr-reverse?","cljs.core/Keyword","clojure.string/starts-with?","cljs.core/name","athens.views.data-browser/headings","data","mode","G__57875","js/Error","cljs.core.into","cljs.core.map","cljs.core/count","cljs.core.apply","cljs.core/max","cljs.core.range","cljs.core.mapcat","cljs.core/keys","cljs.core.distinct","athens.views.data-browser/coll-rows","coll","row","p__57879","vec__57881","cljs.core.nth","idx","value","cljs.core.map_indexed","cljs.core/vector","athens.views.data-browser/reverse-refs-for-attr","eid","G__57884","G__57885","cljs.core/deref","G__57886","G__57887","datascript.core/q","athens.db/dsdb","athens.views.data-browser/reverse-attr","cljs.core.keyword","cljs.core/namespace","athens.views.data-browser/wrap-with-db-id","athens.views.data-browser/reverse-refs","ref-attrs","cljs.core.filter","iter__4529__auto__","s__57891","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__57893","cljs.core/chunk-buffer","i__57892","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57890","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p__57896","map__57897","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","id","athens.views.data-browser/reverse-rows","athens.views.data-browser/map-rows","m","p__57901","vec__57902","k","v","cljs.core.concat","athens.views.data-browser/tuple-rows","tuples","p__57907","vec__57909","values","heading","athens.views.data-browser/maps-rows","ms","hs","s__57914","b__57916","i__57915","iter__57913","s__57918","b__57920","i__57919","iter__57917","s__57922","b__57924","i__57923","iter__57921","h","athens.views.data-browser/get-rows","G__57929","p__57930","map__57931","athens.views.data-browser/cell","athens.views.data-browser/table-style","athens.style.color","athens.views.data-browser/footer-style","p__57933","map__57934","athens.views.data-browser/table-view","limit","cell-fn","rows","stylefy.core.use_style","s__57940","b__57942","i__57941","iter__57939","s__57944","b__57946","i__57945","iter__57943","cljs.core.take","s__57948","b__57950","i__57949","map__57951","iter__57947","map__57955","s__57962","b__57964","i__57963","map__57967","iter__57961","map__57969","c","athens.views.data-browser/coll-of-maps?","x","cljs.core/coll?","cljs.core/every?","cljs.core/associative?","cljs.core/sequential?","athens.views.data-browser/tuples?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","athens.views.data-browser/browser","p__57978","vec__57979","seq57973","G__57974","cljs.core/next","self__4723__auto__","_","opts","reagent.core.atom","increase-limit","cljs.core.swap_BANG_","cljs.core/+","result","cljs.core/map?","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.data-browser\n  (:require\n    [athens.db :as db]\n    [athens.style :refer [color]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(defn attr-unique?\n  [attr]\n  (contains? (get db/schema attr) :db/unique))\n\n\n(defn attr-many?\n  [attr]\n  (= (get-in db/schema [attr :db/cardinality])\n     :db.cardinality/many))\n\n\n(defn attr-ref?\n  [attr]\n  (= (get-in db/schema [attr :db/valueType])\n     :db.type/ref))\n\n\n(defn attr-reverse?\n  [attr]\n  (when (keyword? attr)\n    (str/starts-with? (name attr) \"_\")))\n\n\n(defn headings\n  [data mode]\n  (case mode\n    :coll [\"idx\" \"val\"]\n    :map [\"key\" \"val\"]\n    :tuples (into [\"idx\"] (->> data\n                               (map count)\n                               (apply max)\n                               range))\n    :maps (into [\"idx\"] (->> data\n                             (mapcat keys)\n                             (distinct)))))\n\n\n(defn coll-rows\n  [coll]\n  (let [row (fn [[idx value]]\n              [{:value idx\n                :heading \"idx\"\n                :idx idx}\n               {:value value\n                :heading \"val\"\n                :idx idx}])]\n    (->> coll\n         (map-indexed vector)\n         (map row))))\n\n\n(defn reverse-refs-for-attr\n  [attr eid]\n  (d/q '[:find [?parent ...]\n         :in $ ?attr ?eid\n         :where [?parent :block/children ?eid]]\n       @db/dsdb attr eid))\n\n\n(defn reverse-attr\n  [attr]\n  (keyword (str (namespace attr) \"/_\" (name attr))))\n\n\n(defn wrap-with-db-id\n  [eid]\n  {:db/id eid})\n\n\n(defn reverse-refs\n  [eid]\n  (let [ref-attrs (->> db/schema\n                       keys\n                       (filter attr-ref?))]\n    (into {}\n          (for [attr ref-attrs]\n            [(reverse-attr attr)\n             (map wrap-with-db-id (reverse-refs-for-attr attr eid))]))))\n\n\n(defn reverse-rows\n  [{:keys [:db/id]}]\n  (when id\n    (reverse-refs id)))\n\n\n(defn map-rows\n  [m]\n  (let [row (fn [[k v]]\n              [{:value k\n                :heading \"key\"\n                :idx k}\n               {:value v\n                :attr k\n                :heading \"val\"\n                :idx k}])]\n    (concat (map row m)\n            (map row (reverse-rows m)))))\n\n\n(defn tuple-rows\n  [tuples]\n  (let [row (fn [[idx values]]\n              (into\n                [{:value idx\n                  :heading \"idx\"\n                  :idx idx}]\n                (map-indexed\n                  (fn [heading value]\n                    {:value value\n                     :heading (str heading)\n                     :idx idx})\n                  values)))]\n    (->> tuples\n         (map-indexed vector)\n         (map row))))\n\n\n(defn maps-rows\n  [ms]\n  (let [hs (headings ms :maps)]\n    (for [idx (-> ms count range)]\n      (into [{:value idx\n              :heading \"idx\"\n              :idx idx}]\n            (for [h (rest hs)]\n              {:value (get-in ms [idx h])\n               :attr h\n               :heading (str h)\n               :idx idx})))))\n\n\n(defn get-rows\n  [data mode]\n  (case mode\n    :coll (coll-rows data)\n    :map (map-rows data)\n    :tuples (tuple-rows data)\n    :maps (maps-rows data)))\n\n\n(defn cell\n  [{:keys [value]}]\n  (str value))\n\n\n(def table-style\n  {:border-collapse \"collapse\"\n   :font-size \"12px\"\n   :font-family \"IBM Plex Sans Condensed\"\n   :letter-spacing \"-0.01em\"\n   :margin \"0.5rem 0 0\"\n   :min-width \"100%\"\n   ::stylefy/manual [[:td {:border-top (str \"1px solid \" (color :border-color))\n                           :padding \"0.125rem\"}]\n                     [:tbody {:vertical-align \"top\"}]\n                     [:th {:text-align \"left\" :padding \"0.125rem 0.125rem\"}]\n                     [:tr {:transition \"all 0.05s ease\"}]\n                     [:td:first-child :th:first-child {:padding-left \"0.5rem\"}]\n                     [:td:last-child :th-last-child {:padding-right \"0.5rem\"}]\n                     [:tbody [:tr:hover {:background (color :background-minus-1 :opacity-low)\n                                         :color (color :header-text-color)}]]\n                     [:td>ul {:padding \"0\"\n                              :margin \"0\"\n                              :list-style \"none\"}]\n                     [:td [:li {:margin \"0 0 0.25rem\"\n                                :padding-top \"0.25rem\";\n                                :border-top (str \"1px solid \" (color :border-color))}]]\n                     [:td [:li:first-child {:border-top \"none\" :margin-top \"0\" :padding-top \"0\"}]]\n                     [:a {:color (color :link-color)}]\n                     [:a:hover {:text-decoration \"underline\"}]]})\n\n\n(def footer-style\n  {:margin \"0.5rem 0\"\n   ::stylefy/manual [[:a {:color (color :link-color)}]]})\n\n\n(defn table-view\n  [data mode limit {:keys [cell-fn]\n                    :or {cell-fn cell}}]\n  (let [hs (headings data mode)\n        rows (get-rows data mode)]\n    [:div {:style {:overflow-x \"auto\"}}\n     [:table (use-style table-style)\n      [:thead\n       [:tr (for [h hs]\n              ^{:key (str \"heading-\" h)}\n              [:th (str h)])]]\n      [:tbody\n       (for [row (if (= mode :map)\n                   rows\n                   (take limit rows))]\n         ^{:key (str \"row-\" (-> row first :idx))}\n         [:tr (for [{:keys [idx heading] :as c} row]\n                ^{:key (str idx heading)}\n                [:td {:style {:background-color \"none\"}}\n                 (cell-fn c)])])]]]))\n\n\n(defn coll-of-maps?\n  [x]\n  (and (coll? x)\n       (every? associative? x)\n       (not (every? sequential? x))))\n\n\n(defn tuples?\n  [x]\n  (and (coll? x)\n       (every? sequential? x)))\n\n\n(defn browser\n  [_ & [opts]]\n  (let [limit (r/atom 10)\n        increase-limit #(swap! limit + 10)]\n    (fn [result & _]\n      [:div\n       [:div (cond\n\n               (coll-of-maps? result)\n               (table-view result :maps @limit opts)\n\n               (and (associative? result)\n                    (not (sequential? result)))\n               (table-view result :map @limit opts)\n\n               (tuples? result)\n               (table-view result :tuples @limit opts)\n\n               (coll? result)\n               (table-view result :coll @limit opts)\n\n               :else\n               (str result))]\n       [:div (use-style footer-style)\n        (when (and (coll? result)\n                   (not (map? result))\n                   (< @limit (count result)))\n          [:span (str \"Showing \" @limit \" out of \" (count result) \" rows \")\n           [:a {:on-click increase-limit\n                :style {:cursor :pointer}}\n            \"load more\"]])]])))\n"]}