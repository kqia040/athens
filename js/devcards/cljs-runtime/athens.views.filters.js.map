{"version":3,"sources":["athens/views/filters.cljs"],"mappings":"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","names":["athens.views.filters/container-style","athens.views.filters/search-style","athens.views.filters/controls-style","athens.style.color","athens.views.filters/sort-control-style","athens.views.filters/reset-control-style","athens.views.filters/sort-indicator-style","athens.views.filters/filter-list-style","athens.views.filters/filter-style","athens.views.filters/added-style","athens.views.filters/excluded-style","athens.views.filters/count-style","athens.views.filters/filter-name-style","athens.views.filters/state-style","athens.views.filters/no-items-message-style","athens.style/OPACITIES","athens.views.filters/filters-el","_uid","items","s","reagent.core.atom","sort_","cljs.core/deref","filtered-items","cljs.core/reduce-kv","m","k","v","cljs.core/re-find","cljs.core/re-pattern","cljs.core.assoc","cljs.core._EQ_","cljs.core.into","cljs.core/sorted-map","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in","num-filters","cljs.core/count","cljs.core.filter","p__60219","vec__60220","cljs.core.nth","_k","stylefy.core.use_style","athens.views.textinput/textinput","js/module$node_modules$$material_ui$icons$index.FilterList","e","cljs.core.swap_BANG_","cljs.core/assoc-in","athens.views.buttons/button","_","cljs.core/assoc","js/module$node_modules$$material_ui$icons$index.Sort","js/module$node_modules$$material_ui$icons$index.ArrowDownward","cljs.core.dissoc","cljs.core.doall","iter__4529__auto__","s__60228","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__60230","cljs.core/chunk-buffer","i__60229","vec__60232","cljs.core/-nth","map__60235","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60227","cljs.core/chunk-rest","vec__60240","cljs.core/first","map__60243","cljs.core/cons","cljs.core/rest","count","state","added?","excluded?","cljs.core.merge","G__60238","js/Error","G__60246","js/module$node_modules$$material_ui$icons$index.Check","js/module$node_modules$$material_ui$icons$index.Block","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.filters\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.style :refer [color OPACITIES]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.textinput :refer [textinput]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    #_[re-frame.core :as re-frame :refer [dispatch]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style #_use-sub-style]]))\n\n\n;;; Styles\n\n\n(def container-style\n  {:flex-basis \"30em\"\n   :display \"flex\"\n   :overflow \"auto\"\n   :flex-direction \"column\"})\n\n\n(def search-style\n  {:align-self \"stretch\"\n   :display \"flex\"})\n\n\n(def controls-style\n  {:width \"100%\"\n   :display \"flex\"\n   :flex \"0 0 auto\"\n   :font-size \"12px\"\n   :align-items \"center\"\n   :text-align \"right\"\n   :border-bottom (str \"1px solid \" (color :background-minus-1))\n   :margin \"0.25rem 0 0\"\n   :padding-bottom \"0.25rem\"\n   :justify-content \"space-between\"\n   :font-weight \"500\"\n   :color (color :body-text-color :opacity-high)\n   ::stylefy/manual [[:svg {:font-size \"20px\"}]]})\n\n\n(def sort-control-style {:padding \"0.25rem 0.375rem\"\n                         ::stylefy/manual [[:&:hover :&:focus [:& [:+ [:span {:opacity 1}]]]]]})\n\n\n(def reset-control-style {:margin-left \"0.5em\"})\n\n\n(def sort-indicator-style {:margin-right \"auto\"\n                           :transition \"all 0.2s ease\"\n                           :opacity 0\n                           :display \"flex\"\n                           :flex-direction \"row\"\n                           :align-items \"center\"\n                           :margin-left \"0.5em\"})\n\n\n(def filter-list-style\n  {:align-self \"stretch\"\n   :display \"flex\"\n   :flex \"1 1 100%\"\n   :overflow-y \"auto\"\n   :padding \"0.25rem 0 0\"\n   :flex-direction \"column\"})\n\n\n(def filter-style\n  {:width           \"100%\"\n   :display         \"flex\"\n   :justify-content \"space-between\"\n   :padding         \"0.125rem 0.5rem\"\n   :align-items     \"center\"\n   :border-radius   \"0.25rem\"\n   :margin-block-end \"1px\"\n   :user-select     \"none\"\n   :transition      \"all 0.1s ease\"\n   ::stylefy/manual [[:&:hover {:background (color :background-minus-1 :opacity-med)}]\n                     [:&:active {:transform \"scale(0.99)\"}]]})\n\n\n(def added-style\n  {:background-color (color :link-color :opacity-low)\n   :color (color :link-color)\n   ::stylefy/manual [[:&:hover {:background (color :link-color 0.3)}]\n                     [:&:active {:transform \"scale(0.99)\"}]]})\n\n\n(def excluded-style\n  {:background-color (color :warning-color :opacity-low)\n   :color (color :warning-color)\n   ::stylefy/manual [[:&:hover {:background (color :warning-color 0.3)}]\n                     [:&:active {:transform \"scale(0.99)\"}]]})\n\n\n(def count-style\n  {:padding \"0 1em 0 0\"\n   :color (color :body-text-currentColor)\n   :font-weight \"bold\"\n   :font-size \"11px\"\n   :text-align \"right\"\n   :flex \"0 0 3em\"})\n\n\n(def filter-name-style\n  {:flex \"1 1 100%\"\n   :color (color :body-text-currentColor)\n   :text-align \"left\"})\n\n\n(def state-style\n  {:font-weight \"bold\"\n   :flex \"0 0 auto\"\n   :font-size \"12px\"\n   :display \"flex\"\n   :align-items \"center\"\n   :letter-spacing \"0.1em\"\n   :text-transform \"uppercase\"\n   :margin-right \"0.2em\"\n   ::stylefy/manual [[:svg {:margin-left \"0.2em\"\n                            :margin-right \"0.2em\"\n                            :font-size \"18px\"}]]})\n\n\n(def no-items-message-style\n  {:text-align \"center\"\n   :opacity (:opacity-med OPACITIES)\n   :margin \"0\"})\n\n\n;;; Components\n\n\n(defn filters-el\n  [_uid items]\n  (let [s (r/atom {:sort :lex\n                   :items items\n                   :search \"\"})]\n    (fn [_uid items]\n      (let [sort_ (:sort @s)\n            filtered-items (reduce-kv\n                             (fn [m k v]\n                               (if (re-find\n                                    (re-pattern (str \"(?i)\" (:search @s)))\n                                    k)\n                                 (assoc m k v)\n                                 m))\n                             {}\n                             (:items @s))\n            items (if (= sort_ :lex)\n                    (into (sorted-map) filtered-items)\n                    (into (sorted-map-by (fn [k1 k2]\n                                           (compare\n                                            [(get-in items [k2 :count]) k1]\n                                            [(get-in items [k1 :count]) k2]))) filtered-items))\n            num-filters (count (filter\n                                (fn [[_k v]] (:state v))\n                                items))]\n\n        [:div (use-style container-style)\n\n         ;; Search\n         [textinput (use-style search-style\n                               {:type        \"search\"\n                                :autoFocus  true\n                                :placeholder \"Type to find filters\"\n                                :icon [:> mui-icons/FilterList]\n                                :value (:search @s)\n                                :on-change   (fn [e]\n                                               (swap! s assoc-in [:search] (.. e -target -value)))})]\n\n         ;; Controls\n         [:div (use-style controls-style)\n          [button {:style sort-control-style\n                   :on-click (fn [_]\n                               (swap! s assoc :sort (if (= sort_ :lex)\n                                                      :count\n                                                      :lex)))}\n           [:> mui-icons/Sort]]\n          [:span (use-style sort-indicator-style) [:<> [:> mui-icons/ArrowDownward] (if (= sort_ :lex) \"Title\" \"Number\")]]\n          [:span (str num-filters \" Active\")]\n          [button {:style reset-control-style\n                   :on-click (fn [_]\n                               (swap! s assoc :items\n                                      (reduce-kv\n                                       (fn [m k v]\n                                         (assoc m k (dissoc v :state)))\n                                       {}\n                                       (:items @s))))}\n           \"Reset\"]]\n         \n\n         ;; List\n         [:div (use-style filter-list-style)\n          (if (> (count items) 0)\n            (doall\n             (for [[k {:keys [count state]}] items\n                   :let [added?    (= state :added)\n                         excluded? (= state :excluded)]]\n               ^{:key k}\n               [:div (use-style (merge filter-style\n                                       (cond\n                                         added? added-style\n                                         excluded? excluded-style))\n                                {:on-click (fn [_]\n                                             (swap! s assoc-in [:items k :state]\n                                                    (case state\n                                                      nil :added\n                                                      :added :excluded\n                                                      :excluded nil)))})\n\n               ;; Left\n                [:span (use-style count-style) count]\n                [:span (use-style filter-name-style) k]\n\n               ;; Right\n                (when (or added? excluded?)\n                  [:span (use-style state-style) state\n                   (if added?\n                     [:> mui-icons/Check]\n                     [:> mui-icons/Block])])]))\n            [:p (use-style no-items-message-style) \"No filters found\"])]]))))\n"]}