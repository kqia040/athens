{"version":3,"sources":["athens/effects.cljs"],"mappings":"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","names":["athens.effects/walk-string","string","cljs.core/deref","data","cljs.core.atom","G__60455","G__60456","instaparse.core/transform","title","inner-title","clojure.string.join","p1__60452#","cljs.core.swap_BANG_","cljs.core/update","cljs.core.conj","p1__60453#","uid","p1__60454#","athens.parser/parse-to-ast","athens.effects/new-titles-to-tx-data","new-titles","assert-titles","now","athens.util/now-ts","cljs.core.filter","x","athens.db/search-exact-node-title","cljs.core/contains?","cljs.core.map","t","athens.util/gen-block-uid","athens.effects/old-titles-to-tx-data","old-titles","new-str","node","athens.db/get-block","and__4115__auto__","clojure.string/includes?","cljs.core/empty?","athens.db/count-linked-references-excl-uid","temp__5735__auto__","eid","athens.effects/new-refs-to-tx-data","new-block-refs","e","ref-uid","map__60457","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","block","posh.reagent/pull","athens.db/dsdb","id","refs","athens.db/get-block-refs","cljs.core/set","athens.effects/old-refs-to-tx-data","old-block-refs","athens.db/e-by-av","athens.effects/parse-for-links","with-tx-data","p1__60459#","cljs.core._EQ_","cljs.core/second","cljs.core/last","p1__60460#","cljs.core.nth","p1__60461#","cljs.core/group-by","cljs.core/first","cljs.core.mapv","p__60467","vec__60468","_eid","datoms","p1__60462#","cljs.core.sort_by","cljs.core/not","cljs.core.mapcat","p__60463","vec__60464","assertion","retraction","athens.db/v-by-ea","assert-string","retract-string","assert-data","retract-data","tx-data","cljs.core.concat","re-frame.core/reg-fx","cljs.core.prn","cljs.pprint.pprint","datascript.core.with$","more-tx-data","final-tx-data","cljs.core/vec","outputs","posh.reagent/transact!","new-db","datascript.core.reset_conn_BANG_","p__60471","vec__60472","key","value","js/localStorage.setItem","db","datascript.transit/write-transit-str","p__60475","map__60476","url","method","opts","on-success","on-failure","c__42582__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__42583__auto__","switch__42115__auto__","state_60520","state_val_60521","inst_60487","inst_60489","inst_60490","statearr-60522","statearr-60523","statearr-60524","G__60525","cljs.core/Keyword","statearr-60526","statearr-60527","statearr-60528","statearr-60529","js/Error","statearr-60530","statearr-60531","inst_60500","statearr-60532","statearr-60533","inst_60510","inst_60512","inst_60513","statearr-60534","statearr-60535","statearr-60536","inst_60484","inst_60485","cljs.core.async.impl.ioc-helpers/take!","inst_60518","cljs.core.async.impl.ioc-helpers/return-chan","statearr-60537","statearr-60538","statearr-60539","inst_60505","statearr-60540","inst_60508","inst_60509","statearr-60541","statearr-60542","statearr-60543","inst_60503","statearr-60544","statearr-60545","inst_60515","inst_60516","statearr-60546","inst_60492","inst_60493","inst_60494","inst_60495","inst_60496","statearr-60547","statearr-60548","statearr-60549","state-machine__42116__auto__","ret-value__42117__auto__","result__42118__auto__","cljs.core/keyword-identical?","ex__42119__auto__","e60550","statearr-60551","cljs.core/seq","statearr-60552","state__42584__auto__","statearr-60553","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/post","cljs-http.client/get","cljs-http.client/put","cljs-http.client/delete","re-frame.core/dispatch","timers","p__60554","map__60555","action","event","wait","G__60557","cljs.core/assoc","js/setTimeout","js/clearTimeout","cljs.core/dissoc","p__60558","vec__60559","index","active-el","js/document","html-id","el","js/document.querySelector","goog.dom.selection/setCursorPosition","p__60562","vec__60563","start","end","target","p__60566","vec__60567","tag","properties","stylefy.core/tag"],"sourcesContent":["(ns athens.effects\n  (:require\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.util :as util :refer [now-ts gen-block-uid]]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [go <!]]\n    [cljs.pprint :refer [pprint]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [goog.dom.selection :refer [setCursorPosition]]\n    [instaparse.core :as parse]\n    [posh.reagent :as p :refer [transact!]]\n    [re-frame.core :refer [dispatch reg-fx]]\n    [stylefy.core :as stylefy]))\n\n\n;;; Effects\n\n(defn walk-string\n  \"Walk previous and new strings to delete or add links, block references, etc. to datascript.\"\n  [string]\n  (let [data (atom {})]\n    (parse/transform\n      {:page-link (fn [& title]\n                    (let [inner-title (str/join \"\" title)]\n                      (swap! data update :node/titles #(conj % inner-title))\n                      (str \"[[\" inner-title \"]]\")))\n       :hashtag   (fn [& title]\n                    (let [inner-title (str/join \"\" title)]\n                      (swap! data update :node/titles #(conj % inner-title))\n                      (str \"#\" inner-title)))\n       :block-ref (fn [uid] (swap! data update :block/refs #(conj % uid)))}\n      (parser/parse-to-ast string))\n    @data))\n\n\n(defn new-titles-to-tx-data\n  \"Filter: node/title doesn't exist yet in the db or in the titles being asserted (e.g. when renaming a page and changing it's references).\n  Map: new node/title entity.\"\n  [new-titles assert-titles]\n  (let [now (now-ts)]\n    (->> new-titles\n         (filter (fn [x]\n                   (and (nil? (db/search-exact-node-title x))\n                        (not (contains? assert-titles x)))))\n         (map (fn [t]\n                {:node/title  t\n                 :block/uid   (gen-block-uid)\n                 :create/time now\n                 :edit/time   now})))))\n\n\n(defn old-titles-to-tx-data\n  \"Filter: new-str doesn't include link, page exists, page has no children, and has no other [[linked refs]].\n  Map: retractEntity\"\n  [old-titles uid new-str]\n  (->> old-titles\n       (filter (fn [title]\n                 (let [node (db/get-block [:node/title title])]\n                   (and (not (clojure.string/includes? new-str title))\n                        node\n                        (empty? (:block/children node))\n                        (zero? (db/count-linked-references-excl-uid title uid))))))\n       (map (fn [title]\n              (when-let [eid (:db/id (db/get-block [:node/title title]))]\n                [:db/retractEntity eid])))))\n\n\n(defn new-refs-to-tx-data\n  \"Filter: ((ref-uid)) points to an actual block (without a title), and block/ref relationship doesn't exist yet.\n  Map: add block/ref relationship.\"\n  [new-block-refs e]\n  (->> new-block-refs\n       (filter (fn [ref-uid]\n                 (let [block @(p/pull db/dsdb '[*] [:block/uid ref-uid])\n                       {:keys [node/title db/id]} block\n                       refs  (-> e db/get-block-refs set)]\n                   (and block\n                        (nil? title)\n                        (not (contains? refs id))))))\n       (map (fn [ref-uid] [:db/add e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn old-refs-to-tx-data\n  \"Filter: new-str doesn't include block ref anymore, ((ref-uid)) points to an actual block, and block/ref relationship exists.\n  Map: retract relationship.\"\n  [old-block-refs e new-str]\n  (->> old-block-refs\n       (filter (fn [ref-uid]\n                 (when-not (str/includes? new-str (str \"((\" ref-uid \"))\"))\n                   (let [eid  (db/e-by-av :block/uid ref-uid)\n                         refs (-> e db/get-block-refs set)]\n                     (contains? refs eid)))))\n       (map (fn [ref-uid] [:db/retract e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn parse-for-links\n  \"When block/string is asserted, parse for links and block refs to add.\n  When block/string is retracted, parse for links and block refs to remove.\n  Retractions need to look at asserted block/string.\n\n  TODO: when user edits title, parse for new pages.\"\n  [with-tx-data]\n  (let [assert-titles (->> with-tx-data\n                           (filter #(and (= (second %) :node/title)\n                                         (true? (last %))))\n                           (map #(nth % 2))\n                           set)]\n    (->> with-tx-data\n         (filter #(= (second %) :block/string))\n         ;; group-by entity\n         (group-by first)\n         ;; map sort-by so [true false] gives us [assertion retraction], [assertion], or [retraction]\n         (mapv (fn [[_eid datoms]]\n                 (sort-by #(-> % last not) datoms)))\n         (mapcat (fn [[assertion retraction]]\n                   (cond\n                     ;; [assertion retraction]\n                     (and (true? (last assertion)) (false? (last retraction)))\n                     (let [eid            (first assertion)\n                           uid            (db/v-by-ea eid :block/uid)\n                           assert-string  (nth assertion 2)\n                           retract-string (nth retraction 2)\n                           assert-data    (walk-string assert-string)\n                           retract-data   (walk-string retract-string)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) uid assert-string)\n                           old-block-refs (old-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs\n                                                  old-titles\n                                                  old-block-refs)]\n                       tx-data)\n\n                     ;; [assertion]\n                     (and (true? (last assertion)) (nil? retraction))\n                     (let [eid            (first assertion)\n                           assert-string  (nth assertion 2)\n                           assert-data    (walk-string assert-string)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs)]\n                       tx-data)\n\n                     ;; [retraction]\n                     (and (false? (last assertion)) (nil? retraction))\n                     (let [eid            (first retraction)\n                           uid            (db/v-by-ea eid :block/uid)\n                           assert-string  \"\"\n                           retract-string (nth retraction 2)\n                           retract-data   (walk-string retract-string)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) uid assert-string)\n                           old-block-refs (old-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           tx-data        (concat []\n                                                  old-titles\n                                                  old-block-refs)]\n                       tx-data)))))))\n\n\n(reg-fx\n  :transact!\n  (fn [tx-data]\n    (prn \"TX RAW INPUTS\") ;; event tx-data\n    (pprint tx-data)\n    (let [with-tx-data  (:tx-data (d/with @db/dsdb tx-data))\n          more-tx-data  (parse-for-links with-tx-data)\n          final-tx-data (vec (concat tx-data more-tx-data))]\n      ;;(prn \"TX WITH\") ;; tx-data normalized by datascript to flat datoms\n      ;;(pprint with-tx-data)\n      (prn \"TX FINAL INPUTS\") ;; parsing block/string (and node/title) to derive asserted or retracted titles and block refs\n      (pprint final-tx-data)\n      (prn \"TX OUTPUTS\")\n      (let [outputs (:tx-data (transact! db/dsdb final-tx-data))]\n        (pprint outputs)))))\n\n\n(reg-fx\n  :reset-conn!\n  (fn [new-db]\n    (d/reset-conn! db/dsdb new-db)))\n\n\n(reg-fx\n  :local-storage/set!\n  (fn [[key value]]\n    (js/localStorage.setItem key value)))\n\n\n(reg-fx\n  :local-storage/set-db!\n  (fn [db]\n    (js/localStorage.setItem \"datascript/DB\" (dt/write-transit-str db))))\n\n\n(reg-fx\n  :http\n  (fn [{:keys [url method opts on-success on-failure]}]\n    (go\n      (let [http-fn (case method\n                      :post http/post :get http/get\n                      :put http/put :delete http/delete)\n            res     (<! (http-fn url opts))\n            {:keys [success body] :as all} res]\n        (if success\n          (dispatch (conj on-success body))\n          (dispatch (conj on-failure all)))))))\n\n\n(reg-fx\n  :timeout\n  (let [timers (atom {})]\n    (fn [{:keys [action id event wait]}]\n      (case action\n        :start (swap! timers assoc id (js/setTimeout #(dispatch event) wait))\n        :clear (do (js/clearTimeout (get @timers id))\n                   (swap! timers dissoc id))))))\n\n\n;; Using DOM, focus the target block.\n;; There can actually be multiple elements with the same #editable-uid-UID HTML id\n;; The same unique datascript block can be rendered multiple times: node-page, right sidebar, linked/unlinked references\n;; In this case, find the all the potential HTML blocks with that uid. The one that shares the same closest ancestor as the\n;; activeElement (where the text caret is before the new focus happens), is the container of the block to focus on.\n\n;; If an index is passed, set cursor to that index.\n\n;; TODO: some issues\n;; - auto-focus on textarea\n;; - searching for common-ancestor on inside of setTimeout vs outside\n;;   - element sometimes hasn't been created yet (enter), sometimes has been just destroyed (backspace)\n;; - uid sometimes nil\n\n(reg-fx\n  :editing/focus\n  (fn [[uid index]]\n    (if (nil? uid)\n      (when-let [active-el (.-activeElement js/document)]\n        (.blur active-el))\n      (js/setTimeout (fn []\n                       (let [html-id (str \"#editable-uid-\" uid)\n                             ;;targets (js/document.querySelectorAll html-id)\n                             ;;n       (count (array-seq targets))\n                             el      (js/document.querySelector html-id)]\n                         #_(cond\n                             (zero? n) (prn \"No targets\")\n                             (= 1 n) (prn \"One target\")\n                             (< 1 n) (prn \"Several targets\"))\n                         (when el\n                           (.focus el)\n                           (when index\n                             (setCursorPosition el index)))))\n                     100))))\n\n\n(reg-fx\n  :set-cursor-position\n  (fn [[uid start end]]\n    (js/setTimeout (fn []\n                     (when-let [target (js/document.querySelector (str \"#editable-uid-\" uid))]\n                       (.focus target)\n                       (set! (.-selectionStart target) start)\n                       (set! (.-selectionEnd target) end)))\n                   100)))\n\n\n(reg-fx\n  :stylefy/tag\n  (fn [[tag properties]]\n    (stylefy/tag tag properties)))\n"]}