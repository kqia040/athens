{"version":3,"sources":["athens/devcards/sci_boxes.cljs"],"mappings":"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","names":["athens.devcards.sci-boxes/log","js/console.log","athens.devcards.sci-boxes/trace","x","devcards.core/register-card","devcards.core/card-base","cljs.core.merge","devcards.core/assert-options-map","athens.devcards.sci-boxes/remove-from-vec","v","index","cljs.core/vec","cljs.core.concat","cljs.core.subvec","athens.devcards.sci-boxes/index-of","col","val","cljs.core/first","cljs.core.keep_indexed","idx","cljs.core._EQ_","iter__4529__auto__","s__60330","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__60332","cljs.core/chunk-buffer","i__60331","vec__60333","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60329","cljs.core/chunk-rest","vec__60336","cljs.core/cons","cljs.core/rest","s","opts","sci.core.eval_string","athens.devcards.sci-boxes/key-code->key","athens.devcards.sci-boxes/empty-box","js/athens","js/athens.devcards","js/athens.devcards.sci-boxes","js/athens.devcards.sci-boxes.box-state*","athens.devcards.sci-boxes/box-state*","reagent.core.atom","athens.devcards.sci-boxes/get-parent-id","boxes","child-id","cljs.core/some","p__60342","vec__60343","id","box","p__60346","map__60347","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","athens.devcards.sci-boxes/sci-node?","str-content","clojure.string/starts-with?","p__60349","map__60350","athens.devcards.sci-boxes/eval-box","parent","code","cljs.core.subs","result","e60352","js/Error","e","cljs.core.assoc","athens.devcards.sci-boxes/next-box-id","visited","cljs.core/not","go-up","parent-id","temp__5733__auto__","children","unvisited-child","p1__60353#","siblings","unvisited-sibling","p1__60354#","athens.devcards.sci-boxes/eval-all-boxes","boxes'","visited'","cljs.core.conj","id'","p__60355","map__60356","athens.devcards.sci-boxes/add-child","children-ids","new-idx","cljs.core/conj","athens.devcards.sci-boxes/remove-child","cljs.core.update","p__60358","map__60359","athens.devcards.sci-boxes/add-sibling","next-id","state","cljs.core.get_in","cljs.core/inc","cljs.core/update","cljs.core/assoc","p__60361","map__60362","athens.devcards.sci-boxes/delete-box","cljs.core.update_in","cljs.core/dissoc","athens.devcards.sci-boxes/update-box-content","value","athens.devcards.sci-boxes/handle-return-key!","cljs.core.swap_BANG_","athens.devcards.sci-boxes/handle-backspace-key!","map__60364","cljs.core/deref","cljs.core/empty?","athens.devcards.sci-boxes/handle-box-key-down!","key-code","shift?","k","G__60366","cljs.core/Keyword","athens.devcards.sci-boxes/handle-box-change!","target","p1__60367#","athens.devcards.sci-boxes/sci-result-component","map__60368","hiccup","athens.devcards.sci-boxes/sci-result-wrapper","err*","reagent.core/create-class","err","info","cljs.core/reset!","vec__60370","_","athens.devcards.sci-boxes/box-component","map__60375","map__60376","p1__60373#","p1__60374#","cljs.core.into","s__60380","b__60382","i__60381","iter__60379","js/athens.devcards.sci-boxes.t_athens$devcards$sci_boxes60383","athens.devcards.sci-boxes/t_athens$devcards$sci_boxes60383","_60385","meta60384","this__47591__auto__","devcard-opts__47592__auto__","v__47610__auto__","cljs.core/fn?","data-atom__47611__auto__","owner__47612__auto__","reagent.core/as-element","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","athens.devcards.sci-boxes/->t_athens$devcards$sci_boxes60383","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.sci-boxes\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [reagent.core :as rg]\n    [sci.core :as sci]))\n\n\n(def log js/console.log)\n\n\n(defn trace\n  [x]\n  (log x) x)\n\n\n(defcard \"\n  # An experiment in connecting mini SCI environments\n\n  Let's say you could put executable code in Athens' blocks.\n\n  Some questions:\n   - In what order do we evaluate our blocks?\n   - How do we pass data in and out of our blocks?\n   - How do we handle async code?\n\n  Attempted approach:\n   - Blocks are passed the evaluated result of their parent (`*1`)\n\n   Some other approaches:\n   - Blocks inherit the environment of their parent\n   - Blocks mutate a global environment\n   - Blocks are babashka pods?\n\n  Fun stuff to try:\n   - Pass in the datascript connection\n   - `spit`/`slurp` to IPFS etc.\n  \")\n\n\n(defcard sci\n  \"## Small Clojure Interpreter\n   https://github.com/borkdude/sci\")\n\n\n(defn remove-from-vec\n  \"Returns a new vector with the element at 'index' removed.\n\n  (remove-from-vec [:a :b :c] 1)  =>  [:a :c]\"\n  [v index]\n  (vec (concat (subvec v 0 index) (subvec v (inc index)))))\n\n\n(defn index-of\n  [col val]\n  (first (keep-indexed (fn [idx x]\n                         (when (= x val)\n                           idx))\n                       col)))\n\n\n(defcard sci-examples\n  (for [[s opts]\n        [[\"(inc 1)\"]\n         [\"x\" {:bindings {'x 1}}]\n         [\"{:hiccup [:span \\\"Hello\\\"]}\"]\n         [\"(def a 1)\"]\n         [\":a\"]\n         [\"(require '[lib]) lib/msg\" {:namespaces {'lib {'msg \"hi\"}}}]]]\n    (merge {:s s :result (sci/eval-string s opts)}\n           (when opts\n             {:opts opts}))))\n\n\n(def key-code->key\n  {8   :backspace\n   9   :tab\n   13  :return\n   57  :left-paren\n   219 :left-brace})\n\n\n(def empty-box\n  {:str-content \"\"\n   :children-ids []})\n\n\n(defcard \"\n  ## Experiment #1\n   - A tree of boxes\n   - If a box's `:str-content` begins with `:sci`,\n     evaluate the rest of the string with SCI and assign it to `:result`\n   - Child boxes are passed their parent's `:result` as `*1`, like a REPL\n   - Every time a box's content changes, naively re-evaluate the whole tree top to bottom!\n   - If a box's `:result` is a map with a `hiccup` key, render it after the box\n\n  ENTER key makes a new sibling (if not root)\n\n  SHIFT-ENTER to make a new line\n\n  BACKSPACE in an empty box deletes it\n  \")\n\n\n(defonce box-state*\n  (rg/atom {:next-id 4\n            :boxes {0 (merge empty-box {:children-ids [1 3]\n                                        :str-content \":sci {:message \\\"\ud83c\udf3b\\\" :size 70}\"})\n                    1 (merge empty-box {:children-ids [2]\n                                        :str-content \":sci (merge *1 {:hiccup [:div {:style {:font-size (:size *1)}} (:message *1)]})\"})\n\n                    2 (merge empty-box {:str-content \"I am just a \ud83c\udf43\"})\n                    3 (merge empty-box {:str-content \":sci (:message *1)\"})}}))\n\n\n(defcard box-state* box-state*)\n\n\n(defn get-parent-id\n  [boxes child-id]\n  (some (fn [[id box]]\n          (when (some #{child-id} (:children-ids box))\n            id))\n        boxes))\n\n\n(defn sci-node?\n  [{:keys [str-content]}]\n  (str/starts-with? str-content \":sci\"))\n\n\n(defn eval-box\n  [{:keys [str-content] :as box} parent]\n  (if-not (sci-node? box)\n    box\n    (let [code (subs str-content 4)\n          result (try\n                   (sci/eval-string code {:bindings {'*1 (:result parent)}})\n                   (catch js/Error e\n                     (trace e)))]\n      (assoc box :result result))))\n\n\n;; very naive depth-first search, probably buggy\n(defn next-box-id\n  [boxes visited id]\n  (if (not (visited id))\n    id\n    (let [go-up #(when-let [parent-id (get-parent-id boxes id)]\n                   (next-box-id boxes visited parent-id))]\n      (if-let [children (-> boxes (get id) :children-ids seq)]\n        (if-let [unvisited-child (some #(when (not (visited %))\n                                          %)\n                                       children)]\n          unvisited-child\n          (go-up))\n        (let [parent (get-parent-id boxes id)\n              siblings (:children-ids parent)]\n          (if-let [unvisited-sibling (some #(when (not (visited %))\n                                              %)\n                                           siblings)]\n            unvisited-sibling\n            (go-up)))))))\n\n\n(defn eval-all-boxes\n  [boxes]\n  (loop [boxes boxes\n         visited #{}\n         id 0]\n    (let [box (get boxes id)\n          parent (get boxes (get-parent-id boxes id))\n          boxes' (assoc boxes id (eval-box box parent))\n          visited' (conj visited id)\n          id' (next-box-id boxes visited' id)]\n      (if-not id'\n        boxes'\n        (recur boxes' visited' id')))))\n\n\n(defn add-child\n  [{:keys [children-ids] :as box} idx id]\n  (let [new-idx (inc idx)]\n    (assoc box :children-ids (apply conj\n                                    (subvec children-ids 0 new-idx)\n                                    id\n                                    (subvec children-ids new-idx)))))\n\n\n(defn remove-child\n  [parent child-id]\n  (let [idx (index-of (:children-ids parent) child-id)]\n    (update parent :children-ids remove-from-vec idx)))\n\n\n(defn add-sibling\n  [{:keys [next-id boxes] :as state} id]\n  (let [parent-id (get-parent-id boxes id)\n        siblings (get-in boxes [parent-id :children-ids])\n        idx (index-of siblings id)]\n    (-> state\n        (update :next-id inc)\n        (update :boxes update parent-id add-child idx next-id)\n        (update :boxes assoc next-id empty-box)\n        (update :boxes eval-all-boxes))))\n\n\n(defn delete-box\n  [{:keys [boxes] :as state} id]\n  (let [parent-id (get-parent-id boxes id)]\n    (-> state\n        (update-in [:boxes parent-id] remove-child id)\n        (update :boxes dissoc id)\n        (update :boxes eval-all-boxes))))\n\n\n(defn update-box-content\n  [boxes id value]\n  (update boxes id assoc :str-content value))\n\n\n(defn handle-return-key!\n  [e id]\n  (.preventDefault e)\n  (swap! box-state* add-sibling id))\n\n\n(defn handle-backspace-key!\n  [e id]\n  (let [{:keys [str-content]} (get-in @box-state* [:boxes id])]\n    (when (empty? str-content)\n      (.preventDefault e)\n      (swap! box-state* delete-box id))))\n\n\n(defn handle-box-key-down!\n  [e id]\n  (let [key-code (.-keyCode e)\n        shift? (.-shiftKey e)\n        k (key-code->key key-code)]\n    (case k\n      :return (when (not shift?)\n                (handle-return-key! e id))\n      :backspace (handle-backspace-key! e id)\n      nil)))\n\n\n(defn handle-box-change!\n  [e id]\n  (let [target (.-target e)\n        value (.-value target)]\n    (swap! box-state*\n           #(-> %\n                (update :boxes update-box-content id value)\n                (update :boxes eval-all-boxes)))))\n\n\n(defn sci-result-component\n  [result]\n  (when result\n    (let [{:keys [hiccup]} result]\n      (if hiccup\n        hiccup\n        (str result)))))\n\n\n;; resulting :hiccup could be malformed, catch errors & allow retry\n(defn sci-result-wrapper\n  []\n  (let [err* (rg/atom nil)]\n    (rg/create-class\n      {:component-did-catch (fn [err info]\n                              (reset! err* [err info]))\n       :reagent-render (fn [result]\n                         (if (nil? @err*)\n                           [sci-result-component result]\n                           (let [[_ info] @err*]\n                             [:div\n                              [:code (str info)]\n                              [:div\n                               [:button {:on-click #(reset! err* nil)}\n                                \"re-render\"]]])))})))\n\n\n(defn box-component\n  [id]\n  (let [{:keys [boxes]} @box-state*\n        {:keys [str-content children-ids result] :as box} (get boxes id)]\n    [:div\n     [:div {:style {:display \"flex\"}}\n      id\n      [:textarea {:style {:font-size \"1rem\"\n                          :width \"30rem\"}\n                  :value str-content\n                  :on-change #(handle-box-change! % id)\n                  :on-key-down #(handle-box-key-down! % id)}]\n      (when (sci-node? box)\n        [sci-result-wrapper result])]\n     (when (seq children-ids)\n       (into [:div {:style {:margin-left \"1rem\"}}]\n             (for [id children-ids]\n               [box-component id])))]))\n\n\n(defcard-rg boxes\n  (do\n    (swap! box-state* update :boxes eval-all-boxes)\n    [box-component 0]))\n"]}