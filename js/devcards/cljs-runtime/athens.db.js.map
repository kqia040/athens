{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get","athens.db/parse-hms","hms","cljs.core/coll?","p1__42376#","cljs.core.map","cljs.core.reduce","p__42377","vec__42378","cljs.core.nth","acc","v","cljs.core.assoc","athens.db/parse-tuples","tuples","cljs.core.partition","cljs.core/rest","p1__42384#","clojure.edn/read-string","p1__42385#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/schema","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn","posh.reagent/posh!","athens.db/e-by-av","a","cljs.core/deref","datascript.core.datoms","athens.db/v-by-ea","e","athens.db/rules","athens.db/inc-after","eid","order","G__42391","G__42392","G__42393","G__42394","G__42395","datascript.core/q","athens.db/dec-after","G__42396","G__42397","G__42398","G__42399","G__42400","athens.db/plus-after","x","G__42401","G__42402","G__42403","G__42404","G__42405","G__42406","athens.db/minus-after","G__42407","G__42408","G__42409","G__42410","G__42411","G__42412","athens.db/not-contains?","coll","cljs.core/contains?","athens.db/last-child?","uid","G__42413","G__42414","G__42415","G__42416","cljs.core.sort_by","cljs.core/second","cljs.core/last","cljs.core._EQ_","athens.db/sort-block-children","block","temp__5733__auto__","children","cljs.core/seq","cljs.core/vec","athens.db/block-document-pull-vector","athens.db/node-document-pull-vector","cljs.core.conj","athens.db/get-block-document","id","posh.reagent/pull","athens.db/get-node-document","athens.db/get-athens-datoms","p1__42421#","cljs.core.filter","athens.db/shape-parent-query","pull-results","b","res","cljs.core.dissoc","cljs.core/reverse","athens.db/get-parents-recursively","athens.db/get-block","athens.db/get-parent","G__42425","G__42426","datascript.core/entity","athens.db/get-older-sib","sib-uid","G__42427","G__42428","G__42429","G__42430","older-sib","athens.db/same-parent?","uids","parents","G__42431","G__42432","G__42433","cljs.core/count","athens.db/deepest-child-block","document","G__42438","G__42439","G__42440","datascript.core/pull","map__42443","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","n","athens.db/get-children-recursively","temp__5735__auto__","G__42445","G__42446","G__42447","cljs.core/tree-seq","athens.db/retract-page-recursively","title","cljs.core.mapv","cljs.core/next","athens.db/retract-uid-recursively","athens.db/re-case-insensitive","query","cljs.core/re-pattern","athens.util/escape-str","athens.db/search-exact-node-title","G__42448","G__42449","G__42450","var_args","G__42452","athens.db/search-in-node-title","js/Error","athens.db.search_in_node_title","ignore-dup","clojure.string/blank?","results","G__42454","G__42455","G__42456","G__42457","cljs.core.take","athens.db/get-root-parent-node","G__42463","athens.db/search-in-block-content","athens.db.search_in_block_content","G__42465","G__42466","G__42467","p1__42460#","athens.db/get-block-refs","G__42468","G__42469","G__42470","athens.db/nth-sibling","map__42471","find-order","G__42475","G__42476","G__42477","G__42478","G__42479","athens.db/prev-block-uid","map__42485","parent","prev-sibling","open","prev-block","athens.db/next-sibling-recursively","map__42489","sib","node","or__4126__auto__","G__42515","athens.db/next-block-uid","map__42516","next-block-recursive","and__4115__auto__","selection?","athens.db.next_block_uid","js/athens.db.history","athens.db/history","cljs.core.atom","athens.db/history-limit","athens.db/drop-tail","xs","pred","athens.db/trim-head","cljs.core.drop","athens.db/find-prev","p1__42542#","cljs.core.take_while","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__42543#","cljs.core.drop_while","datascript.core.listen_BANG_","tx-report","map__42546","db-before","db-after","cljs.core.swap_BANG_","h","p1__42544#","athens.db/get-ref-ids","pattern","posh.reagent/q","athens.db/merge-parents-and-block","ref-ids","cljs.core/reduce-kv","m","_","blocks","cljs.core.merge","athens.db/group-by-parent","cljs.core/group-by","athens.db/get-data","athens.db/get-data-by-block","athens.db/get-linked-references","athens.patterns/linked","athens.db/get-linked-references-by-block","athens.db/get-unlinked-references","athens.patterns/unlinked","athens.db/count-linked-references-excl-uid","p1__42553#","cljs.core.remove","athens.db/get-linked-block-references","athens.db/replace-linked-refs","G__42561","G__42562","G__42563","datascript.core/pull-many","new-str","clojure.string/replace","cljs.core/PersistentVector"],"sourcesContent":["(ns athens.db\n  (:require\n    [athens.patterns :as patterns]\n    [athens.util :refer [escape-str]]\n    [clojure.edn :as edn]\n    [clojure.string :as string]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh! pull q]]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :db/filepath         nil\n               :db/synced           true\n               :db/mtime            nil\n               :current-route       nil\n               :loading?            true\n               :modal               false\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   false\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               :right-sidebar/width 32\n               :mouse-down          false\n               :daily-notes/items   []\n               :selected/items      []\n               :theme/dark          true})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}\n   :block/refs     {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n\n\n;; todo: turn into an effect\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(defn v-by-ea\n  [e a]\n  (-> (d/datoms @dsdb :eavt e a) first :v))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(between ?p ?lower-bound ?upper-bound ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?lower-bound)]\n     [(< ?o ?upper-bound)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]\n    [(plus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(+ ?o ?x) ?new-o]]\n    [(minus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(- ?o ?x) ?new-o]]\n    [(siblings ?uid ?sib-e)\n     [?e :block/uid ?uid]\n     [?p :block/children ?e]\n     [?p :block/children ?sib-e]]])\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn plus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (plus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn minus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (minus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn not-contains?\n  [coll v]\n  (not (contains? coll v)))\n\n\n(defn last-child?\n  [uid]\n  (->> (d/q '[:find ?sib-uid ?sib-o\n              :in $ % ?uid\n              :where\n              (siblings ?uid ?sib)\n              [?sib :block/uid ?sib-uid]\n              [?sib :block/order ?sib-o]]\n            @dsdb rules uid)\n       (sort-by second)\n       last\n       first\n       (= uid)))\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(def block-document-pull-vector\n  '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :block/_refs])\n\n\n(def node-document-pull-vector\n  (-> block-document-pull-vector\n      (conj :node/title :page/sidebar)))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull dsdb block-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull dsdb node-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-athens-datoms\n  \"Copy REPL output to athens-datoms.cljs\"\n  [id]\n  (->> @(pull dsdb (filter #(not (or (= % :db/id) (= % :block/_refs))) node-document-pull-vector) id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull dsdb '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]} :block/open] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn get-older-sib\n  [uid]\n  (let [sib-uid   (d/q '[:find ?uid .\n                         :in $ % ?target-uid\n                         :where\n                         (siblings ?target-uid ?sib)\n                         [?target-e :block/uid ?target-uid]\n                         [?target-e :block/order ?target-o]\n                         [(dec ?target-o) ?prev-sib-order]\n                         [?sib :block/order ?prev-sib-order]\n                         [?sib :block/uid ?uid]]\n                       @dsdb rules uid)\n        older-sib (get-block [:block/uid sib-uid])]\n    older-sib))\n\n\n(defn same-parent?\n  \"Given a coll of uids, determine if uids are all direct children of the same parent.\"\n  [uids]\n  (let [parents (d/q '[:find ?parents\n                       :in $ [?uids ...]\n                       :where\n                       [?e :block/uid ?uids]\n                       [?parents :block/children ?e]]\n                     @dsdb uids)]\n    (= (count parents) 1)))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> (d/pull @dsdb '[:block/order :block/uid {:block/children ...}] id)\n                      sort-block-children)]\n    (loop [block document]\n      (let [{:block/keys [children]} block\n            n (count children)]\n        (if (zero? n)\n          block\n          (recur (get children (dec n))))))))\n\n\n(defn get-children-recursively\n  \"Get list of children UIDs for given block ID (including the root block's UID)\"\n  [uid]\n  (when-let [eid (e-by-av :block/uid uid)]\n    (->> eid\n         (d/pull @dsdb '[:block/order :block/uid {:block/children ...}])\n         (tree-seq :block/children :block/children)\n         (map :block/uid))))\n\n\n(defn retract-page-recursively\n  \"Retract all blocks of a page, excluding the page. Used to reset athens/Welcome page.\n  Page is excluded because block/uid will be generated by walk-string if [[athens/Welcome]] doesn't already exist.\"\n  [title]\n  (let [eid (e-by-av :node/title title)\n        uid (v-by-ea eid :block/uid)]\n    (->> (get-children-recursively uid)\n         (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]))\n         next)))\n\n\n(defn retract-uid-recursively\n  \"Retract all blocks of a page, including the page.\"\n  [uid]\n  (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n        (get-children-recursively uid)))\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" (escape-str query))))\n\n\n(defn search-exact-node-title\n  [query]\n  (d/q '[:find (pull ?node [:db/id :node/title :block/uid]) .\n         :in $ ?query\n         :where [?node :node/title ?query]]\n       @dsdb\n       query))\n\n\n(defn search-in-node-title\n  ([query] (search-in-node-title query 20 false))\n  ([query n] (search-in-node-title query n false))\n  ([query n ignore-dup]\n   (if (string/blank? query)\n     (vector)\n     (let [results (->> (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n                               :in $ ?query-pattern ?query\n                               :where\n                               [?node :node/title ?title]\n                               [(re-find ?query-pattern ?title)]\n                               [(not= ?title ?query)]]                ;; ignore exact match to avoid duplicate\n                             @dsdb\n                             (re-case-insensitive query)\n                             (when ignore-dup query))\n                        (take n))]\n       results))))\n\n\n(defn get-root-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  ([query] (search-in-block-content query 20))\n  ([query n]\n   (if (string/blank? query)\n     (vector)\n     (->>\n       (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n              :in $ ?query-pattern\n              :where\n              [?block :block/string ?txt]\n              [(re-find ?query-pattern ?txt)]]\n            @dsdb\n            (re-case-insensitive query))\n       (take n)\n       (map get-root-parent-node)\n       (mapv #(dissoc % :block/_children))))))\n\n\n(defn get-block-refs\n  [e]\n  (d/q '[:find [?refs ...]\n         :in $ ?e\n         :where\n         [?e :block/refs ?refs]]\n       @dsdb\n       e))\n\n\n(defn nth-sibling\n  \"Find sibling that has order+n of current block.\n  Negative n means previous sibling.\n  Positive n means next sibling.\"\n  [uid n]\n  (let [block      (get-block [:block/uid uid])\n        {:block/keys [order]} block\n        find-order (+ n order)]\n    (d/q '[:find (pull ?sibs [*]) .\n           :in $ % ?curr-uid ?find-order\n           :where\n           (siblings ?curr-uid ?sibs)\n           [?sibs :block/order ?find-order]]\n         @dsdb rules uid find-order)))\n\n\n(defn prev-block-uid\n  \"If order 0, go to parent.\n   If order n but block is closed, go to prev sibling.\n   If order n and block is OPEN, go to prev sibling's deepest child.\"\n  [uid]\n  (let [block        (get-block [:block/uid uid])\n        parent       (get-parent [:block/uid uid])\n        prev-sibling (nth-sibling uid -1)\n        {:block/keys [open uid]} prev-sibling\n        prev-block   (cond\n                       (zero? (:block/order block)) parent\n                       (false? open) prev-sibling\n                       (true? open) (deepest-child-block [:block/uid uid]))]\n    (:block/uid prev-block)))\n\n\n(defn next-sibling-recursively\n  \"Search for next sibling. If not there (i.e. is last child), find sibling of parent.\n  If parent is root, go to next sibling.\"\n  [uid]\n  (loop [uid uid]\n    (let [sib    (nth-sibling uid +1)\n          parent (get-parent [:block/uid uid])\n          {node :node/title}   (get-block [:block/uid uid])]\n      (if (or sib (:node/title parent) node)\n        sib\n        (recur (:block/uid parent))))))\n\n\n(defn next-block-uid\n  \"1-arity:\n    if open and children, go to child 0\n    else recursively find next sibling of parent\n  2-arity:\n    used for multi-block-selection; ignores child blocks\"\n  ([uid]\n   (let [block                (->> (get-block [:block/uid uid])\n                                   sort-block-children)\n         {:block/keys [children open] node :node/title} block\n         next-block-recursive (next-sibling-recursively uid)]\n     (cond\n       (and (or open node) children) (:block/uid (first children))\n       next-block-recursive (:block/uid next-block-recursive))))\n  ([uid selection?]\n   (if selection?\n     (let [next-block-recursive (next-sibling-recursively uid)]\n       (:block/uid next-block-recursive))\n     (next-block-uid uid))))\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n;; -- Linked & Unlinked References ----------\n\n(defn get-ref-ids\n  [pattern]\n  @(q '[:find [?e ...]\n        :in $ ?regex\n        :where\n        [?e :block/string ?s]\n        [(re-find ?regex ?s)]]\n      dsdb\n      pattern))\n\n\n(defn merge-parents-and-block\n  [ref-ids]\n  (let [parents (reduce-kv (fn [m _ v] (assoc m v (get-parents-recursively v)))\n                           {}\n                           ref-ids)\n        blocks (map (fn [id] (get-block-document id)) ref-ids)]\n    (mapv\n      (fn [block]\n        (merge block {:block/parents (get parents (:db/id block))}))\n      blocks)))\n\n\n(defn group-by-parent\n  [blocks]\n  (group-by (fn [x]\n              (-> x\n                  :block/parents\n                  first\n                  :node/title))\n            blocks))\n\n\n(defn get-data\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block group-by-parent seq))\n\n\n(defn get-data-by-block\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block seq))\n\n\n(defn get-linked-references\n  \"For node-page references UI.\"\n  [title]\n  (-> title patterns/linked get-data))\n\n\n(defn get-linked-references-by-block\n  [title]\n  (-> title patterns/linked get-data-by-block))\n\n\n(defn get-unlinked-references\n  \"For node-page references UI.\"\n  [title]\n  (-> title patterns/unlinked get-data))\n\n\n(defn count-linked-references-excl-uid\n  [title uid]\n  (->> (get-linked-references-by-block title)\n       (remove #(= (:block/uid %) uid))\n       count))\n\n\n(defn get-linked-block-references\n  [block]\n  (->> (:block/_refs block)\n       (mapv (fn [x] (:db/id x)))\n       (merge-parents-and-block)\n       (group-by-parent)\n       vec))\n\n\n(defn replace-linked-refs\n  \"For a given title, unlinks [[brackets]], #[[brackets]], and #brackets.\"\n  [title]\n  (let [pattern (patterns/linked title)]\n    (->> pattern\n         get-ref-ids\n         (d/pull-many @dsdb [:db/id :block/string])\n         (mapv (fn [x]\n                 (let [new-str (string/replace (:block/string x) pattern title)]\n                   (assoc x :block/string new-str)))))))\n"]}