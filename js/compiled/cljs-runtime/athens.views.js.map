{"version":3,"sources":["athens/views.cljs"],"mappings":";AAuBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAWL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAaL,AAAA,AAAMC;AAAN,AAEE,AAAMC,AAAO,AAAA,AAAA,AAACC;AAAd,AACE,AAAU,AAAA,AAAAC,AAAA,AAAOF;AAAjB;;AAAA,AACE,AAACG,AAAS,AAAA,AAAAD,AAAMF;;AAChB,AAAA,AAAA,AAACI;;;AAGP,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAG,AAAAC;AACHC,AAAK,AAAA,AAAA,AAAA,AAAIH;AADf,AAEE,AAAA,AAAAI,AAAM,AAAUH;AAAhB,AAAqB,AAAA,AAAA,AAACH,AAAwB,AAAA,AAAAM;;;AAC9C,AAAaH,AAAGE;;AAMpB,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA;;AAMA,AAAA,AAAMC;AAAN,AAEE;AAAA,AAAA,AAKGC,AAAMC;;;AAGX,AAAA,AAAMC;AAAN,AAEE,AAAMM,AAAI,AAAA,AAAA,AAACpB;AAAXe,AAAA,AAAAd,AAC+C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAACuB,AAAKX,AAA0BO;AAD/EL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcM;AADd,AAAAF,AAAAJ,AAAA,AACyBO;AADzB,AAAAH,AAAAJ,AAAA,AACsCQ;AADtC,AAEE,AACEF;AADF,AACSI,AAAoBF;;AAD7B,AAEED;AAFF,AAEUI,AAAqBH;;AAF/B,AAAA,AAAA,AAAA;;;;;AAMJ;;;;AAAA,AAAMI,AAGHC;AAHH,AAAA,AAIG,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACSnB;;;AADT;AAEQqB;;;AAFR;AAGSpB;;;AAHT;AAIQG;;;;AACNiB;;;;;AAGL,AAAA,AAAMC;AAAN,AAEE,AAAMJ,AAAW,AAAA,AAAA,AAAC5B;AACZiC,AAAW,AAAA,AAAA,AAACjC;AACZkC,AAAW,AAAA,AAAA,AAAClC;AAFlB,AAGE;AAAA,AAAA,AAAA,AAAA,AAAA,AAEIF,AACAqC,AACD,AACE,AAAAC,AAAA,AAAAnC,AAAMgC;AAAN,AAAA,AAAAG;AAAA,AAAAnC,AAAeiC;;AAAfE;;AADF,AAAA,AAAA,AAAAnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyBoC,AAEtBJ,AAASK,AAGH,AAAA,AAAArC,AAAA,AAAA,AAAA,AAAOiC,AAAOG,AACR,AAACE,AAAU3C,AACf4C,AACAC,AACK,AAAA,AAAA,AAACF,AAAU1C,AACY,AAAA,AAAA,AAAA6C,AAAM,AAAA,AAAAzC,AAAA,AAAC0C,AAAGf;AAAV,AACG,AAAAc,AAAAA,AAACE,AAAAA,AAAAA;AAZ3C,AAAA,AAAA3C,AAAA,AAAA,AAWuC,AAE3B0B,AAAaC,AACdiB,AACAC","names":["athens.views/app-wrapper-style","athens.views/main-content-style","athens.views/alert","alert-","re_frame.core.subscribe","cljs.core/deref","js/alert","re-frame.core/dispatch","athens.views/file-cb","e","fr","js/FileReader","file","p1__64071#","athens.views/about-panel","athens.views/pages-panel","athens.views.all-pages/table","athens.db/dsdb","athens.views/page-panel","map__64072","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","uid","title","string","id","posh.reagent/pull","athens.views.node-page/node-page-component","athens.views.block-page/block-page-component","athens.views/match-panel","route-name","G__64074","cljs.core/Keyword","athens.views.daily-notes/daily-notes-panel","athens.views/main-panel","loading","modal","athens.views.athena/athena-component","and__4115__auto__","athens.views.filesystem/window","athens.views.spinner/initial-spinner-component","stylefy.core.use_style","athens.views.app-toolbar/app-toolbar","athens.views.left-sidebar/left-sidebar","p1__64075#","cljs.core._EQ_","athens.views.daily-notes/db-scroll-daily-notes","athens.views.right-sidebar/right-sidebar-component","athens.views.devtool/devtool-component"],"sourcesContent":["(ns athens.views\n  (:require\n    [athens.db :as db]\n    [athens.subs]\n    [athens.views.all-pages :refer [table]]\n    [athens.views.app-toolbar :refer [app-toolbar]]\n    [athens.views.athena :refer [athena-component]]\n    [athens.views.block-page :refer [block-page-component]]\n    [athens.views.daily-notes :refer [daily-notes-panel db-scroll-daily-notes]]\n    [athens.views.devtool :refer [devtool-component]]\n    [athens.views.filesystem :as filesystem]\n    [athens.views.left-sidebar :refer [left-sidebar]]\n    [athens.views.node-page :refer [node-page-component]]\n    [athens.views.right-sidebar :refer [right-sidebar-component]]\n    [athens.views.spinner :refer [initial-spinner-component]]\n    [posh.reagent :refer [pull]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def app-wrapper-style\n  {:display \"grid\"\n   :grid-template-areas\n   \"'app-header app-header app-header'\n    'left-sidebar main-content secondary-content'\n   'devtool devtool devtool'\"\n   :grid-template-columns \"auto 1fr auto\"\n   :grid-template-rows \"auto 1fr auto\"\n   :height \"100vh\"})\n\n\n(def main-content-style\n  {:flex \"1 1 100%\"\n   :grid-area \"main-content\"\n   :align-items \"flex-start\"\n   :justify-content \"stretch\"\n   :padding-top \"2.5rem\"\n   :display \"flex\"\n   :overflow-y \"auto\"})\n\n\n;;; Components\n\n\n(defn alert\n  []\n  (let [alert- (subscribe [:alert])]\n    (when-not (nil? @alert-)\n      (js/alert (str @alert-))\n      (dispatch [:alert/unset]))))\n\n\n(defn file-cb\n  [e]\n  (let [fr (js/FileReader.)\n        file (.. e -target -files (item 0))]\n    (set! (.-onload fr) #(dispatch [:parse-datoms (.. % -target -result)]))\n    (.readAsText fr file)))\n\n\n;; Panels\n\n\n(defn about-panel\n  []\n  [:div\n   [:h1 \"About Panel\"]])\n\n\n(defn pages-panel\n  []\n  (fn []\n    ;;[:div\n    ;; [:input.input-file {:type      \"file\"\n    ;;                     :name      \"file-input\"\n    ;;                     :on-change (fn [e] (file-cb e))}]]\n    [table db/dsdb]))\n\n\n(defn page-panel\n  []\n  (let [uid (subscribe [:current-route/uid])\n        {:keys [node/title block/string db/id]} @(pull db/dsdb '[*] [:block/uid @uid])]\n    (cond\n      title [node-page-component id]\n      string [block-page-component id]\n      :else [:h3 \"404: This page doesn't exist\"])))\n\n\n(defn match-panel\n  \"When app initializes, `route-name` is `nil`. Side effect of this is that a daily page for today is automatically\n  created when app inits. This is expected, but perhaps shouldn't be a side effect here.\"\n  [route-name]\n  [(case route-name\n     :about about-panel\n     :home daily-notes-panel\n     :pages pages-panel\n     :page page-panel\n     daily-notes-panel)])\n\n\n(defn main-panel\n  []\n  (let [route-name (subscribe [:current-route/name])\n        loading    (subscribe [:loading?])\n        modal      (subscribe [:modal])]\n    (fn []\n      [:<>\n       [alert]\n       [athena-component]\n       (cond\n         (and @loading @modal) [athens.views.filesystem/window]\n\n         @loading [initial-spinner-component]\n\n         :else [:<>\n                (when @modal [filesystem/window])\n                [:div (use-style app-wrapper-style)\n                 [app-toolbar]\n                 [left-sidebar]\n                 [:div (use-style main-content-style\n                                  {:on-scroll (when (= @route-name :home)\n                                                #(db-scroll-daily-notes %))})\n                  [match-panel @route-name]]\n                 [right-sidebar-component]\n                 [devtool-component]]])])))\n"]}