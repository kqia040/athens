{"version":3,"sources":["athens/views/node_page.cljs"],"mappings":"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","names":["athens.views.node-page/page-style","athens.views.node-page/title-style","athens.style.color","garden.selectors/+","athens.views.node-page/references-style","athens.views.node-page/references-heading-style","athens.views.node-page/references-list-style","athens.views.node-page/references-group-title-style","athens.views.node-page/references-group-style","athens.views.node-page/reference-breadcrumbs-style","athens.views.node-page/references-group-block-style","athens.views.node-page/page-menu-toggle-style","athens.views.node-page/handle-new-first-child-block-click","parent-uid","new-uid","athens.util/gen-block-uid","now","athens.util/now-ts","re-frame.core/dispatch","athens.views.node-page/handle-enter","e","uid","_state","children","map__57953","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","node-page","block-page","start","value","athens.keybindings/destruct-key-down","cljs.core/empty?","athens.views.node-page/handle-page-arrow-key","state","map__57957","map__57958","cljs.core/deref","map__57959","key-code","target","start?","athens.keybindings/block-start?","end?","athens.keybindings/block-end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","cljs.core._EQ_","bottom-row?","up?","goog.events.KeyCodes/UP","down?","goog.events.KeyCodes/DOWN","left?","goog.events.KeyCodes/LEFT","right?","goog.events.KeyCodes/RIGHT","athens.views.node-page/handle-key-down","map__57971","shift","athens.util/get-caret-position","cljs.core.swap_BANG_","cljs.core/assoc","athens.keybindings/arrow-key-direction","cljs.core/not","goog.events.KeyCodes/ENTER","athens.views.node-page/handle-change","athens.views.node-page/get-linked-refs","ref-groups","cljs.core/first","cljs.core/second","athens.views.node-page/map-new-refs","linked-refs","old-title","new-title","cljs.core.map","p__57975","map__57976","string","new-str","clojure.string/replace","athens.patterns/linked","athens.views.node-page/get-existing-page","local-title","G__57982","G__57983","G__57984","datascript.core/q","athens.db/dsdb","athens.views.node-page/existing-block-count","cljs.core/count","G__57985","G__57986","G__57987","athens.views.node-page/handle-blur","node","map__57988","map__57989","dbid","initial","local","cljs.core.not_EQ_","existing-page","new-linked-refs","new-page","new-datoms","cljs.core.concat","new-parent-uid","existing-page-block-count","reindex","p__57993","map__57994","order","delete-page","cancel-fn","cljs.core/merge","athens.views.node-page/init-state","confirm-fn","athens.router.navigate_uid","athens.views.node-page/placeholder-block-el","stylefy.core.use_style","athens.views.blocks/bullet-style","athens.views.node-page/sync-title","title","athens.views.node-page/menu-dropdown","_node","ref","cljs.core.atom","handle-click-outside","and__4115__auto__","reagent.core/create-class","_this","goog.events/listen","js/document","goog.events/unlisten","map__57999","map__58000","sidebar","show","x","y","timeline-page?","athens.util/is-timeline-page","cljs.core.merge","p1__57998#","athens.views.dropdown/dropdown-style","cljs.core/reset!","athens.views.dropdown/menu-style","athens.views.buttons/button","js/module$node_modules$$material_ui$icons$index.BookmarkBorder","js/module$node_modules$$material_ui$icons$index.Bookmark","athens.views.dropdown/menu-separator-style","athens.router/navigate","js/module$node_modules$$material_ui$icons$index.Delete","athens.views.node-page/ref-comp","block","reagent.core.atom","cljs.core/rest","linked-ref-data","cljs.core/set","_","map__58004","parents","athens.db/get-block-document","athens.views.breadcrumbs/breadcrumbs-list","cljs.core.doall","iter__4529__auto__","s__58008","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__58010","cljs.core/chunk-buffer","i__58009","map__58012","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58007","cljs.core/chunk-rest","map__58015","cljs.core/cons","athens.views.breadcrumbs/breadcrumb","new-B","new-P","cljs.core.drop_last","or__4126__auto__","athens.views.blocks/block-el","athens.views.node-page/node-page-el","editing-uid","map__58018","map__58019","message","alert-show","athens.views.alerts/alert-component","komponentit.autosize/textarea","rect","js/module$node_modules$$material_ui$icons$index.MoreHoriz","s__58024","b__58026","i__58025","map__58028","iter__58023","map__58030","child","s__58033","b__58035","i__58034","vec__58039","cljs.core.nth","iter__58032","vec__58068","linked-or-unlinked","refs","cljs.core/not-empty","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$icons$index.Link","s__58044","b__58046","i__58045","vec__58047","iter__58043","vec__58059","s__58072","b__58074","i__58073","vec__58076","iter__58071","vec__58083","group-title","group","athens.parse-renderer/pull-node-from-string","s__58052","b__58054","i__58053","iter__58051","s__58064","b__58066","i__58065","iter__58063","s__58080","b__58082","i__58081","iter__58079","s__58087","b__58089","i__58088","iter__58086","athens.views.node-page/node-page-component","ident","map__58091","athens.db/get-node-document","re_frame.core.subscribe","clojure.string/blank?","athens.db/get-linked-references","athens.util/escape-str","athens.db/get-unlinked-references","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.node-page\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [get-linked-references get-unlinked-references]]\n    [athens.keybindings :refer [destruct-key-down arrow-key-direction block-start? block-end?]]\n    [athens.parse-renderer :as parse-renderer :refer [pull-node-from-string]]\n    [athens.patterns :as patterns]\n    [athens.router :refer [navigate-uid navigate]]\n    [athens.style :refer [color]]\n    [athens.util :refer [now-ts gen-block-uid escape-str is-timeline-page get-caret-position]]\n    [athens.views.alerts :refer [alert-component]]\n    [athens.views.blocks :refer [block-el bullet-style]]\n    [athens.views.breadcrumbs :refer [breadcrumbs-list breadcrumb]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.dropdown :refer [dropdown-style menu-style menu-separator-style]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [garden.selectors :as selectors]\n    [goog.events :refer [listen unlisten]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n;;; Styles\n\n\n(def page-style\n  {:margin \"2rem auto\"\n   :padding \"1rem 2rem 10rem 2rem\"\n   :flex-basis \"100%\"\n   :max-width \"55rem\"})\n\n\n(def title-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :margin \"0.10em 0 0.10em 1rem\"\n   :letter-spacing \"-0.03em\"\n   :white-space \"pre-line\"\n   :word-break \"break-word\"\n   :line-height \"1.40em\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :font-weight \"inherit\"\n                                 :padding \"0\"\n                                 :letter-spacing \"inherit\"\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :background \"transparent\"\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"0.25rem\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [(selectors/+ :.is-editing :span) {:opacity 0}]]})\n\n\n(def references-style {:margin-block \"3em\"})\n\n\n(def references-heading-style\n  {:font-weight \"normal\"\n   :display \"flex\"\n   ;;:padding \"0 2rem\"\n   :align-items \"center\"\n   ::stylefy/manual [[:svg {:margin-right \"0.25em\"\n                            :font-size \"1rem\"}]\n                     [:span {:flex \"1 1 100%\"}]]})\n\n\n(def references-list-style\n  {:font-size \"14px\"})\n\n\n(def references-group-title-style\n  {:color (color :link-color)\n   :margin \"0 1.5rem\"\n   :font-weight \"500\"\n   ::stylefy/manual [[:a:hover {:cursor \"pointer\"\n                                :text-decoration \"underline\"}]]})\n\n\n(def references-group-style\n  {:background (color :background-minus-2 :opacity-med)\n   :padding \"1rem 0.5rem\"\n   :border-radius \"0.25rem\"\n   :margin \"0.5em 0\"})\n\n\n(def reference-breadcrumbs-style\n  {:font-size \"12px\"\n   :padding \"0.25rem calc(2rem - 0.5em)\"})\n\n\n(def references-group-block-style\n  {:border-top [[\"1px solid \" (color :border-color)]]\n   :padding-block-start \"1em\"\n   :margin-block-start \"1em\"\n   ::stylefy/manual [[:&:first-of-type {:border-top \"0\"\n                                        :margin-block-start \"0\"}]]})\n\n\n(def page-menu-toggle-style\n  {:position \"absolute\"\n   :left \"-0.5rem\"\n   :border-radius \"1000px\"\n   :padding \"0.375rem 0.5rem\"\n   :color (color :body-text-color :opacity-high)\n   :top \"50%\"\n   :transform \"translate(-100%, -50%)\"})\n\n\n;;; Helpers\n\n\n(defn handle-new-first-child-block-click\n  [parent-uid]\n  (let [new-uid   (gen-block-uid)\n        now       (now-ts)]\n    (dispatch [:transact [{:block/uid       parent-uid\n                           :edit/time       now\n                           :block/children  [{:block/order  0\n                                              :block/uid    new-uid\n                                              :block/open   true\n                                              :block/string \"\"}]}]])\n    (dispatch [:editing/uid new-uid])))\n\n\n(defn handle-enter\n  [e uid _state children]\n  (.. e preventDefault)\n  (let [node-page  (.. e -target (closest \".node-page\"))\n        block-page (.. e -target (closest \".block-page\"))\n        {:keys [start value]} (destruct-key-down e)]\n    (cond\n      block-page (dispatch [:split-block-to-children uid value start])\n      node-page (if (empty? children)\n                  (handle-new-first-child-block-click uid)\n                  (dispatch [:down])))))\n\n\n(defn handle-page-arrow-key\n  [e uid state]\n  (let [{:keys [key-code target]} (destruct-key-down e)\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight)\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)]\n\n    (cond\n      (or (and up? top-row?)\n          (and left? start?)) (do (.. e preventDefault)\n                                  (dispatch [:up uid]))\n      (or (and down? bottom-row?)\n          (and right? end?)) (do (.. e preventDefault)\n                                 (dispatch [:down uid])))))\n\n\n(defn handle-key-down\n  [e uid state children]\n  (let [{:keys [key-code shift]} (destruct-key-down e)\n        caret-position (get-caret-position (.. e -target))]\n    (swap! state assoc :caret-position caret-position)\n    (cond\n      (arrow-key-direction e) (handle-page-arrow-key e uid state)\n      (and (not shift) (= key-code KeyCodes.ENTER)) (handle-enter e uid state children))))\n\n\n(defn handle-change\n  [e state]\n  (let [value (.. e -target -value)]\n    (swap! state assoc :title/local value)))\n\n\n(defn get-linked-refs\n  [ref-groups]\n  (->> ref-groups\n       first\n       second\n       first\n       second))\n\n\n(defn map-new-refs\n  \"Find and replace linked ref with new linked ref, based on title change.\"\n  [linked-refs old-title new-title]\n  (map (fn [{:block/keys [uid string]}]\n         (let [new-str (str/replace string\n                                    (patterns/linked old-title)\n                                    (str \"$1$3$4\" new-title \"$2$5\"))]\n           {:db/id [:block/uid uid]\n            :block/string new-str}))\n       linked-refs))\n\n\n(defn get-existing-page\n  \"?uid used for navigate-uid. Go to existing page following the merge.\"\n  [local-title]\n  (d/q '[:find ?uid .\n         :in $ ?t\n         :where\n         [?e :node/title ?t]\n         [?e :block/uid ?uid]]\n       @db/dsdb local-title))\n\n\n(defn existing-block-count\n  \"Count is used to reindex blocks after merge.\"\n  [local-title]\n  (count (d/q '[:find [?ch ...]\n                :in $ ?t\n                :where\n                [?e :node/title ?t]\n                [?e :block/children ?ch]]\n              @db/dsdb local-title)))\n\n\n(declare init-state)\n\n\n(defn handle-blur\n  \"When textarea blurs and its value is different from initial page title:\n   - if no other page exists, rewrite page title and linked refs\n   - else page with same title does exists: prompt to merge\n     - confirm-fn: delete current page, rewrite linked refs, merge blocks, and navigate to existing page\n     - cancel-fn: reset state\n  The current blocks will be at the end of the existing page.\"\n  [node state ref-groups]\n  (let [{dbid :db/id children :block/children} node\n        {:keys [title/initial title/local]} @state]\n    (when (not= initial local)\n      (let [existing-page   (get-existing-page local)\n            linked-refs     (get-linked-refs ref-groups)\n            new-linked-refs (map-new-refs linked-refs initial local)]\n        (if (empty? existing-page)\n          (let [new-page   {:db/id dbid :node/title local}\n                new-datoms (concat [new-page] new-linked-refs)]\n            (swap! state assoc :title/initial local)\n            (dispatch [:transact new-datoms]))\n          (let [new-parent-uid            existing-page\n                existing-page-block-count (existing-block-count local)\n                reindex                   (map (fn [{:block/keys [order uid]}]\n                                                 {:db/id           [:block/uid uid]\n                                                  :block/order     (+ order existing-page-block-count)\n                                                  :block/_children [:block/uid new-parent-uid]})\n                                               children)\n                delete-page               [:db/retractEntity dbid]\n                new-datoms                (concat [delete-page]\n                                                  new-linked-refs\n                                                  reindex)\n                cancel-fn                 #(swap! state merge init-state)\n                confirm-fn                (fn []\n                                            (navigate-uid new-parent-uid)\n                                            (dispatch [:transact new-datoms])\n                                            (cancel-fn))]\n            (swap! state assoc\n                   :alert/show true\n                   :alert/message (str \"\\\"\" local \"\\\"\" \" already exists, merge pages?\")\n                   :alert/confirm-fn confirm-fn\n                   :alert/cancel-fn cancel-fn)))))))\n\n\n;;; Components\n\n(defn placeholder-block-el\n  [parent-uid]\n  [:div {:class \"block-container\"}\n   [:div {:style {:display \"flex\"}}\n    [:span (use-style bullet-style)]\n    [:span {:on-click #(handle-new-first-child-block-click parent-uid)} \"Click here to add content...\"]]])\n\n\n(defn sync-title\n  \"Ensures :title/initial is synced to node/title.\n  Cases:\n  - User opens a page for the first time.\n  - User navigates from a page to another page.\n  - User merges current page with existing page, navigating to existing page.\"\n  [title state]\n  (when (not= title (:title/initial @state))\n    (swap! state assoc :title/initial title :title/local title)))\n\n\n(def init-state\n  {:menu/show        false\n   :menu/x           nil\n   :menu/y           nil\n   :title/initial    nil\n   :title/local      nil\n   :alert/show       nil\n   :alert/message    nil\n   :alert/confirm-fn nil\n   :alert/cancel-fn  nil})\n\n\n(defn menu-dropdown\n  [_node state]\n  (let [ref                  (atom nil)\n        handle-click-outside (fn [e]\n                               (when (and (:menu/show @state)\n                                          (not (.. @ref (contains (.. e -target)))))\n                                 (swap! state assoc :menu/show false)))]\n    (r/create-class\n      {:display-name \"node-page-menu\"\n       :component-did-mount (fn [_this] (listen js/document \"mousedown\" handle-click-outside))\n       :component-will-unmount (fn [_this] (unlisten js/document \"mousedown\" handle-click-outside))\n       :reagent-render   (fn [node state]\n                           (let [{:block/keys [uid] sidebar :page/sidebar title :node/title} node\n                                 {:menu/keys [show x y]} @state\n                                 timeline-page? (is-timeline-page uid)]\n                             (when show\n                               [:div (merge (use-style dropdown-style\n                                                       {:ref #(reset! ref %)})\n                                            {:style {:font-size \"14px\"\n                                                     :position \"fixed\"\n                                                     :left (str x \"px\")\n                                                     :top (str y \"px\")}})\n                                [:div (use-style menu-style)\n                                 (if sidebar\n                                   [button {:on-click #(dispatch [:page/remove-shortcut uid])}\n                                    [:<>\n                                     [:> mui-icons/BookmarkBorder]\n                                     [:span \"Remove Shortcut\"]]]\n                                   [button {:on-click #(dispatch [:page/add-shortcut uid])}\n                                    [:<>\n                                     [:> mui-icons/Bookmark]\n                                     [:span \"Add Shortcut\"]]])\n                                 (when-not timeline-page?\n                                   [:hr (use-style menu-separator-style)])\n                                 (when-not timeline-page?\n                                   [button {:on-click #(do\n                                                         (navigate :pages)\n                                                         (dispatch [:page/delete uid title]))}\n                                    [:<> [:> mui-icons/Delete] [:span \"Delete Page\"]]])]])))})))\n\n\n(defn ref-comp\n  [block]\n  (let [state           (r/atom {:block   block\n                                 :parents (rest (:block/parents block))})\n        linked-ref-data {:linked-ref     true\n                         :initial-open   true\n                         :linked-ref-uid (:block/uid block)\n                         :parent-uids    (set (map :block/uid (:block/parents block)))}]\n    (fn [_]\n      (let [{:keys [block parents]} @state\n            block (db/get-block-document (:db/id block))]\n        [:<>\n         [breadcrumbs-list {:style reference-breadcrumbs-style}\n          (doall\n            (for [{:keys [node/title block/string block/uid]} parents]\n              [breadcrumb {:key      (str \"breadcrumb-\" uid)\n                           :on-click #(do (let [new-B (db/get-block-document [:block/uid uid])\n                                                new-P (drop-last parents)]\n                                            (swap! state assoc :block new-B :parents new-P)))}\n               (or title string)]))]\n         [block-el block linked-ref-data]]))))\n\n\n;; TODO: where to put page-level link filters?\n(defn node-page-el\n  \"title/initial is the title when a page is first loaded.\n  title/local is the value of the textarea.\n  We have both, because we want to be able to change the local title without transacting to the db until user confirms.\n  Similar to atom-string in blocks. Hacky, but state consistency is hard!\"\n  [_ _ _]\n  (let [state (r/atom init-state)]\n    (fn [node editing-uid ref-groups]\n      (let [{:block/keys [children uid] title :node/title} node\n            {:menu/keys [show] :alert/keys [message confirm-fn cancel-fn] alert-show :alert/show} @state\n            timeline-page? (is-timeline-page uid)]\n\n        (sync-title title state)\n\n        [:div (use-style page-style {:class [\"node-page\"]\n                                     :data-uid uid})\n\n         (when alert-show\n           [:div (use-style {:position \"absolute\"\n                             :top \"50px\"\n                             :left \"35%\"})\n            [alert-component message confirm-fn cancel-fn]])\n\n         ;; Header\n         [:h1 (use-style title-style\n                         {:data-uid uid\n                          :class    \"page-header\"\n                          :on-click (fn [e] (navigate-uid uid e))})\n          ;; Prevent editable textarea if a node/title is a date\n          ;; Don't allow title editing from daily notes, right sidebar, or node-page itself.\n          (when-not timeline-page?\n            [autosize/textarea\n             {:value         (:title/local @state)\n              :id            (str \"editable-uid-\" uid)\n              :class         (when (= editing-uid uid) \"is-editing\")\n              :on-blur       (fn [_] (handle-blur node state ref-groups))\n              :on-key-down   (fn [e] (handle-key-down e uid state children))\n              :on-change     (fn [e] (handle-change e state))}])\n          [button {:class    [(when show \"active\")]\n                   :on-click (fn [e]\n                               (.. e stopPropagation)\n                               (if show\n                                 (swap! state assoc :menu/show false)\n                                 (let [rect (.. e -target getBoundingClientRect)]\n                                   (swap! state merge {:menu/show true\n                                                       :menu/x    (.. rect -left)\n                                                       :menu/y    (.. rect -bottom)}))))\n                   :style    page-menu-toggle-style}\n           [:> mui-icons/MoreHoriz]]\n          (:title/local @state)]\n          ;;(parse-renderer/parse-and-render title uid)]\n\n         ;; Dropdown\n         [menu-dropdown node state]\n\n         ;; Children\n         (if (empty? children)\n           [placeholder-block-el uid]\n           [:div\n            (for [{:block/keys [uid] :as child} children]\n              ^{:key uid}\n              [block-el child])])\n\n\n         ;; References\n         (doall\n           (for [[linked-or-unlinked refs] ref-groups]\n             (when (not-empty refs)\n               [:section (use-style references-style {:key linked-or-unlinked})\n                [:h4 (use-style references-heading-style)\n                 [(r/adapt-react-class mui-icons/Link)]\n                 [:span linked-or-unlinked]]\n                 ;; Hide button until feature is implemented\n                 ;;[button {:disabled true} [(r/adapt-react-class mui-icons/FilterList)]]]\n                [:div (use-style references-list-style)\n                 (doall\n                   (for [[group-title group] refs]\n                     [:div (use-style references-group-style {:key (str \"group-\" group-title)})\n                      [:h4 (use-style references-group-title-style)\n                       [:a {:on-click #(navigate-uid (:block/uid @(pull-node-from-string group-title)))} group-title]]\n                      (doall\n                        (for [block group]\n                          [:div (use-style references-group-block-style {:key (str \"ref-\" (:block/uid block))})\n                           [ref-comp block]]))]))]])))]))))\n\n\n(defn node-page-component\n  [ident]\n  (let [{:keys [#_block/uid node/title] :as node} (db/get-node-document ident)\n        editing-uid @(subscribe [:editing/uid])]\n    (when-not (str/blank? title)\n      ;; TODO: let users toggle open/close references\n      (let [ref-groups [[\"Linked References\" (get-linked-references (escape-str title))]\n                        [\"Unlinked References\" (get-unlinked-references (escape-str title))]]]\n        [node-page-el node editing-uid ref-groups]))))\n"]}