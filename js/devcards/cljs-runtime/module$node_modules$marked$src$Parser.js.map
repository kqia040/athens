{
"version":3,
"file":"module$node_modules$marked$src$Parser.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/marked/src/Parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$marked$src$Parser\"] = function(global,require,module,exports) {\nconst Renderer = require('./Renderer.js');\nconst TextRenderer = require('./TextRenderer.js');\nconst Slugger = require('./Slugger.js');\nconst { defaults } = require('./defaults.js');\nconst {\n  unescape\n} = require('./helpers.js');\n\n/**\n * Parsing & Compiling\n */\nmodule.exports = class Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.tokens.header[j]),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.cells.length;\n          for (j = 0; j < l2; j++) {\n            row = token.tokens.cells[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k]),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens[0].type === 'text') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Renderer","TextRenderer","Slugger","defaults","unescape","constructor","options","renderer","textRenderer","slugger","parse","tokens","parser","Parser","top","out","i","j","k","header","l","length","token","type","hr","heading","parseInline","depth","code","text","lang","escaped","cell","l2","tablecell","align","tablerow","body","cells","row","l3","table","blockquote","ordered","start","loose","items","item","checked","task","itemBody","checkbox","unshift","listitem","list","html","paragraph","errMsg","silent","console","error","Error","link","href","title","image","strong","em","codespan","br","del"]
}
